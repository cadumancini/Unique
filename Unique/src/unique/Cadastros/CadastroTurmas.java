/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unique.Cadastros;

import Tabelas.Aluno;
import Tabelas.Falta;
import Tabelas.Funcionario;
import Tabelas.Historico;
import Tabelas.Nivel;
import Tabelas.Turma;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import unique.Consultas.AlunosCadastrados;
import unique.Consultas.TurmasCadastradas;
import unique.GerarMensalidades;
import util.ConnectionUtil;
import util.HibernateUtil;
import util.ReportUtil;

/**
 *
 * @author arlorencini
 */
public class CadastroTurmas extends javax.swing.JFrame {
    Session conexao;
    Transaction tx;
    List<Aluno> listaAlunos;
    DefaultTableModel model;
    AlunosCadastrados consultaAlunos;
    TurmasCadastradas consultaTurmas;
    private static CadastroTurmas instance = null;
    boolean fechando = false;
    /**
     * Creates new form CadastroTurmas
     */
    private CadastroTurmas() {
        initComponents();
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Logo.png")));
        
        try{    
            //Buscando os níveis cadastrados:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Nivel.class);
            select.addOrder(Order.asc("Codigo"));
            comboBoxNivel.removeAllItems();

            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                List<Nivel> temp = select.list();

                temp.stream().forEach((list) -> {
                    comboBoxNivel.addItem(list.getCodigo());
                });
            }
            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        try{
            //Buscando os professores cadastrados:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Funcionario.class);
            select.add(Restrictions.like("Tipo", "Professor", MatchMode.START));
            select.addOrder(Order.asc("Nome"));
            comboBoxProfessor.removeAllItems();

            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                List<Funcionario> temp = select.list();

                temp.stream().forEach((list) -> {
                    comboBoxProfessor.addItem(list.getID().toString() + " - " + list.getNome());
                });
            }
            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        txtNome.requestFocusInWindow();
        
        model = new DefaultTableModel(new String[] {"ID", "Nome", "Telefone", "Celular"}, 0);
        tabelaAlunos.setModel(model);
        
        listaAlunos = new ArrayList<>();
        
        lblInfoNome.setVisible(false);
    }
    
    public static CadastroTurmas getInstance() {
        if (instance == null)
            instance = new CadastroTurmas();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        comboBoxNivel = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comboBoxSituacao = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        comboBoxProfessor = new javax.swing.JComboBox();
        chkSeg = new javax.swing.JCheckBox();
        chkTer = new javax.swing.JCheckBox();
        chkQua = new javax.swing.JCheckBox();
        chkQui = new javax.swing.JCheckBox();
        chkSab = new javax.swing.JCheckBox();
        chkSex = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        txtHora = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        txtDataInicio = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtBoxNome = new javax.swing.JTextField();
        lblInfoNome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAlunos = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnRemoverAluno = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Turmas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel1.setText("Cadastro de Turmas");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Nível:");

        comboBoxNivel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxNivel.setEnabled(false);
        comboBoxNivel.setNextFocusableComponent(comboBoxProfessor);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Nome:");

        txtNome.setColumns(10);
        txtNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNome.setNextFocusableComponent(comboBoxNivel);
        txtNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomeFocusLost(evt);
            }
        });
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Situação:");

        comboBoxSituacao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativa", "Inativa" }));
        comboBoxSituacao.setEnabled(false);
        comboBoxSituacao.setNextFocusableComponent(comboBoxNivel);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("ID:");

        lblID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblID.setText(" ");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Dia(s) da Semana:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Professor(a):");

        comboBoxProfessor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxProfessor.setEnabled(false);
        comboBoxProfessor.setNextFocusableComponent(chkSeg);

        chkSeg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkSeg.setText("Seg");
        chkSeg.setEnabled(false);
        chkSeg.setNextFocusableComponent(chkTer);

        chkTer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkTer.setText("Ter");
        chkTer.setEnabled(false);
        chkTer.setNextFocusableComponent(chkQua);

        chkQua.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkQua.setText("Qua");
        chkQua.setEnabled(false);
        chkQua.setNextFocusableComponent(chkQui);

        chkQui.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkQui.setText("Qui");
        chkQui.setEnabled(false);
        chkQui.setNextFocusableComponent(chkSex);

        chkSab.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkSab.setText("Sáb");
        chkSab.setEnabled(false);
        chkSab.setNextFocusableComponent(txtHora);

        chkSex.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkSex.setText("Sex");
        chkSex.setEnabled(false);
        chkSex.setNextFocusableComponent(chkSab);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Horário de Início:");

        try {
            txtHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHora.setEnabled(false);
        txtHora.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtHora.setNextFocusableComponent(txtDataInicio);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Data Início das Aulas:");

        txtDataInicio.setColumns(10);
        try {
            txtDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataInicio.setEnabled(false);
        txtDataInicio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDataInicio.setNextFocusableComponent(txtBoxNome);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Digite o nome de um aluno para pesquisar e adicionar à esta turma:");

        txtBoxNome.setColumns(50);
        txtBoxNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNome.setEnabled(false);
        txtBoxNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxNomeKeyReleased(evt);
            }
        });

        lblInfoNome.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        lblInfoNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        lblInfoNome.setText("huehue");
        lblInfoNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseExited(evt);
            }
        });

        tabelaAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaAlunos.setEnabled(false);
        jScrollPane1.setViewportView(tabelaAlunos);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Alunos inseridos:");

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/dialog-ok.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setEnabled(false);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnRemoverAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnRemoverAluno.setText("Remover Aluno");
        btnRemoverAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverAlunoActionPerformed(evt);
            }
        });

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/edit-find.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setEnabled(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblInfoNome, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkSeg)
                                            .addComponent(chkQui))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkSex)
                                            .addComponent(chkTer))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkQua)
                                            .addComponent(chkSab)))
                                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel13)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel10)))
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboBoxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(55, 55, 55))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRemoverAluno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvar)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(comboBoxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(lblID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(comboBoxProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(comboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(chkSeg)
                    .addComponent(chkTer)
                    .addComponent(chkQua)
                    .addComponent(jLabel14)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkQui)
                    .addComponent(chkSex)
                    .addComponent(chkSab)
                    .addComponent(jLabel15)
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnCancelar)
                    .addComponent(btnRemoverAluno)
                    .addComponent(btnExcluir)
                    .addComponent(btnImprimir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomeFocusGained
        // TODO add your handling code here:
        txtNome.selectAll();
    }//GEN-LAST:event_txtNomeFocusGained

    private void txtNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyReleased
        // TODO add your handling code here:
        if(txtNome.getText().length() != 0){
            txtNome.setText(txtNome.getText().toUpperCase());
        }
    }//GEN-LAST:event_txtNomeKeyReleased

    public void LoadInfoForClass(Long turmaID){
        lblID.setText(turmaID.toString());
        
        try{
            conexao = HibernateUtil.openSession();

            Turma t = (Turma) conexao.get(Turma.class, turmaID);

            txtNome.setText(t.getDescricao());

            if(t.isAtiva()){
                comboBoxSituacao.setSelectedIndex(0);
            } else{
                comboBoxSituacao.setSelectedIndex(1);
            }

            comboBoxNivel.setSelectedItem(t.getNivel().getCodigo());
            String professor = t.getProfessor().getID().toString() + " - " + t.getProfessor().getNome();
            comboBoxProfessor.setSelectedItem(professor);

            Time hora = t.getHorario();
            DateFormat df = new SimpleDateFormat("HH:mm");  
            txtHora.setText(df.format(hora));

            Date data = t.getDataInicio();
            df = new SimpleDateFormat("dd/MM/yyyy");
            txtDataInicio.setText(df.format(data));

            String diasSemana = t.getDiasSemana();
            if(diasSemana.contains("Seg"))
                chkSeg.setSelected(true);
            if(diasSemana.contains("Ter"))
                chkTer.setSelected(true);
            if(diasSemana.contains("Qua"))
                chkQua.setSelected(true);
            if(diasSemana.contains("Qui"))
                chkQui.setSelected(true);
            if(diasSemana.contains("Sex"))
                chkSex.setSelected(true);
            if(diasSemana.contains("Sab"))
                chkSab.setSelected(true);

            listaAlunos.clear();
            listaAlunos = t.getAlunos();

            model = new DefaultTableModel(new String[] {"ID", "Nome", "Telefone", "Celular"}, 0);
            tabelaAlunos.removeAll();
            tabelaAlunos.setModel(model);

            for(Aluno a : listaAlunos){
                model.addRow(new Object[]{ a.getID().toString(), a.getNome(), a.getTelefone(), a.getCelular() });
            }

            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        LiberarCampos(true);
        txtBoxNome.requestFocusInWindow();
    }
    
    private void txtBoxNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNomeKeyReleased
        //Pesquisando no banco:
        if(txtBoxNome.getText().length() != 0){
            //Passando para UPPERCASE:
            txtBoxNome.setText(txtBoxNome.getText().toUpperCase());

            //Liberando os campos:
            //LiberarCampos(true);

            try{
                //Verificando se existe o nome cadastrado no banco:
                conexao = HibernateUtil.openSession();
                Criteria select = conexao.createCriteria(Aluno.class);
                select.add(Restrictions.like("Nome", txtBoxNome.getText(), MatchMode.ANYWHERE));

                if(select.list().size() > 0){
                    lblInfoNome.setText("Foram encontrados " + select.list().size() + " resultados semelhantes já cadastrados. Clique para visualizar.");
                    lblInfoNome.setVisible(true);
                }else{
                    lblInfoNome.setVisible(false);
                }

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            lblInfoNome.setVisible(false);
        }
    }//GEN-LAST:event_txtBoxNomeKeyReleased

    private void lblInfoNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseClicked
        //Abrindo a janela de consulta:
        consultaAlunos = AlunosCadastrados.getInstance(txtBoxNome.getText(), AlunosCadastrados.CALLER.CALLER_CADASTROTURMA);
        consultaAlunos.SetJanelaPai(this);

        consultaAlunos.setVisible(true);
    }//GEN-LAST:event_lblInfoNomeMouseClicked

    public void LoadInfoForStudent(Long id){
        System.out.println("ID RECEBIDO: " + id.toString());
        
        try{
            //Verificando se existe o nome cadastrado no banco:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Aluno.class);
            select.add(Restrictions.eq("ID", id));

            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                List<Aluno> temp = select.list();
                temp.stream().forEach((Aluno list) -> {
                    boolean inserir = true;
                    for(Aluno a : listaAlunos){
                        if(Objects.equals(a.getID(), list.getID())){
                            inserir = false;
                            JOptionPane.showMessageDialog(consultaAlunos, "O Aluno selecionado já foi inserido nessa turma!", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    if(inserir){
                        model.addRow(new Object[]{ list.getID(), list.getNome(), list.getTelefone(), list.getCelular() });
                        listaAlunos.add(list);
                    }
                });   
            }

            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        txtBoxNome.setText("");
        txtBoxNome.requestFocusInWindow();
        lblInfoNome.setVisible(false);
    }
    
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
    private void lblInfoNomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseEntered
        lblInfoNome.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseEntered

    private void lblInfoNomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseExited
        lblInfoNome.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseExited

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Confirmar a inclusão/alteração de turma?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            boolean salvar = true;
        
            //Temos responsáveis?
            if(listaAlunos.size() <= 0 && salvar){
                if(JOptionPane.showConfirmDialog(null, "A turma será cadastrada sem alunos. Continuar?", "Aviso", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION){
                    JOptionPane.showMessageDialog(this, "Operação de cadastro cancelada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    salvar = false;
                }
            }

            if(salvar){
                try{
                    Turma turma = new Turma();

                    //Buscando o nivel:
                    conexao = HibernateUtil.openSession();
                    Criteria select = conexao.createCriteria(Nivel.class);
                    select.add(Restrictions.like("Codigo", comboBoxNivel.getSelectedItem().toString(), MatchMode.EXACT));
                    select.addOrder(Order.asc("Codigo"));

                    if(select.list().size() > 0){
                        Nivel nivel = (Nivel)select.list().get(0);
                        turma.setNivel(nivel);
                    }else{
                        turma.setNivel(null);
                    }
                    conexao.close();
                    /* ---------------------------------------------- */
                    if(comboBoxSituacao.getSelectedIndex() == 0)
                        turma.setAtiva(true);
                    else
                        turma.setAtiva(false);
                    /* ---------------------------------------------- */
                    turma.setDescricao(txtNome.getText());
                    /* ---------------------------------------------- */
                    //Buscando o professor:
                    conexao = HibernateUtil.openSession();
                    //Pegando ID:
                    String txt = comboBoxProfessor.getSelectedItem().toString();
                    int pos = txt.indexOf("-");
                    txt = txt.substring(0, (pos - 1));
                    Funcionario fun = (Funcionario) conexao.get(Funcionario.class, Long.parseLong(txt));
                    turma.setProfessor(fun);

                    conexao.close();
                    /* ---------------------------------------------- */
                    String dias = "";
                    if(chkSeg.isSelected())
                        dias += "Seg;";
                    if(chkTer.isSelected())
                        dias += "Ter;";
                    if(chkQua.isSelected())
                        dias += "Qua;";
                    if(chkQui.isSelected())
                        dias += "Qui;";
                    if(chkSex.isSelected())
                        dias += "Sex;";
                    if(chkSab.isSelected())
                        dias += "Sab";

                    if(dias.charAt(dias.length()-1) == ';'){
                        dias = dias.substring(0, dias.length()-1);
                    }
                    turma.setDiasSemana(dias);
                    /* ---------------------------------------------- */
                    SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");  
                    Date hora;
                    Time time = null;
                    try {  
                        hora = sdf.parse(txtHora.getText());
                        time = new Time(hora.getTime());
                    } catch (ParseException ex) {
                        Logger.getLogger(CadastroTurmas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turma.setHorario(time);
                    /* ---------------------------------------------- */
                    Date data = null;
                    try {
                        data = DateFormat.getDateInstance().parse(txtDataInicio.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(CadastroAlunos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turma.setDataInicio(data);
                    /* ---------------------------------------------- */
                    //Relacionando alunos:
                    if(lblID.getText().equals(" ")){
                        //Turma nova, somente adicionar alunos:
                        turma.setAlunos(new ArrayList<>());
                        for(Aluno a : listaAlunos){
                            turma.getAlunos().add(a);
                        }
                    } else{
                        //Turma existente. Se item na lista não tiver na lista da turma, adicionar. Se tiver, não faz nada.
                        conexao = HibernateUtil.openSession();  
                        tx = conexao.beginTransaction();
                        Turma t = (Turma) conexao.get(Turma.class, Long.parseLong(lblID.getText()));
                        turma.setAlunos(t.getAlunos());

                        //Verificando se precisa adicionar algum aluno:
                        for(Aluno a : listaAlunos){
                            boolean encontrou = false;
                            for(Aluno al : t.getAlunos()){
                                if(Objects.equals(al.getID(), a.getID())){
                                    encontrou = true;
                                    break;
                                }
                            }

                            if(!encontrou){
                                turma.getAlunos().add(a);
                            }
                        }

                        boolean cont = true;
                        //Verificando se precisa remover algum aluno:
                        while(cont){
                            boolean removeu = false;
                            for(Aluno a : t.getAlunos()){
                                boolean encontrou = false;
                                for(Aluno al : listaAlunos){
                                    if(Objects.equals(al.getID(), a.getID())){
                                        encontrou = true;
                                        break;
                                    }
                                }

                                if(!encontrou){
                                    //Removendo aluno de faltas e historico, e removendo da turma:

                                    //Faltas:
                                    Criteria crit = conexao.createCriteria(Falta.class);
                                    crit.add(Restrictions.eq("Aluno", a));
                                    if(crit.list().size() > 0){
                                        List<Falta> list = crit.list();
                                        list.stream().forEach((f) -> {
                                            conexao.delete(f);
                                        });
                                    }

                                    //Historico:
                                    crit = conexao.createCriteria(Historico.class);
                                    crit.add(Restrictions.eq("Aluno", a));
                                    if(crit.list().size() > 0){
                                        List<Historico> list = crit.list();
                                        list.stream().forEach((h) -> {
                                            conexao.delete(h);
                                        });
                                    }

                                    //Turma:
                                    turma.getAlunos().remove(a);
                                    removeu = true;
                                    break;
                                }
                            }
                            if(!removeu)
                                cont = false;
                        }

                        tx.commit();
                        conexao.close();
                        turma.setID(Long.parseLong(lblID.getText()));
                    }
                    /* ---------------------------------------------- */

                    conexao = HibernateUtil.openSession();
                    tx = conexao.beginTransaction();
                    conexao.saveOrUpdate(turma);
                    tx.commit();
                    conexao.close();

                    lblID.setText(turma.getID().toString());
                    JOptionPane.showMessageDialog(this, "Operação realizada com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else{
            JOptionPane.showMessageDialog(this, "Operação abortada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
        LiberarCampos(false);
        btnExcluir.setEnabled(false);
        btnImprimir.setEnabled(false);
        txtNome.requestFocusInWindow();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomeFocusLost
        // TODO add your handling code here:
        if(fechando)
            return;
        
        try{
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Turma.class);
            select.add(Restrictions.like("Descricao", txtNome.getText(), MatchMode.EXACT));

            if(select.list().size() > 0){
                if(JOptionPane.showConfirmDialog(this, "Existe(m) " + select.list().size() + " turma(s) com este nome. Deseja visualizar?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                    consultaTurmas = TurmasCadastradas.getInstance(txtNome.getText(), TurmasCadastradas.CALLER.CALLER_CADASTRO);
                    consultaTurmas.SetJanelaPai(this);
                    consultaTurmas.setVisible(true);
                }
            } else{
                LiberarCampos(true);
                comboBoxSituacao.requestFocusInWindow();

                comboBoxNivel.setSelectedIndex(0);
                comboBoxProfessor.setSelectedIndex(0);
                comboBoxSituacao.setSelectedIndex(0);
                chkSeg.setSelected(false);
                chkTer.setSelected(false);
                chkQua.setSelected(false);
                chkQui.setSelected(false);
                chkSex.setSelected(false);
                chkSab.setSelected(false);
                txtHora.setText("");
                txtDataInicio.setText("");
                txtBoxNome.setText("");

                model = new DefaultTableModel(new String[] {"ID", "Nome", "Telefone", "Celular"}, 0);
                tabelaAlunos.removeAll();
                tabelaAlunos.setModel(model);

                listaAlunos.clear();
                lblID.setText(" ");
            }

            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtNomeFocusLost

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        LimparCampos();
        LiberarCampos(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRemoverAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverAlunoActionPerformed
        // TODO add your handling code here:
        if(tabelaAlunos.getSelectedRow() >= 0){
            if(JOptionPane.showConfirmDialog(this, "Deseja realmente remover esse aluno da turma?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                for(Aluno a : listaAlunos){
                    if(Objects.equals(a.getID(), Long.parseLong((String) tabelaAlunos.getValueAt(tabelaAlunos.getSelectedRow(), 0)))){
                        listaAlunos.remove(a);
                        break;
                    }
                }
                DefaultTableModel model = (DefaultTableModel) tabelaAlunos.getModel();
                model.removeRow(tabelaAlunos.getSelectedRow());
            }
        } else{
            JOptionPane.showMessageDialog(this, "Nenhum aluno selecionado para exclusão.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverAlunoActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Deseja realmente excluir esta turma?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            //Remover faltas, historico e turma:
            conexao = HibernateUtil.openSession();
            tx = conexao.beginTransaction();
            
            try{
                Turma turma = (Turma) conexao.get(Turma.class, Long.parseLong(lblID.getText()));

                //Faltas:
                Criteria crit = conexao.createCriteria(Falta.class);
                crit.add(Restrictions.eq("Turma", turma));
                if(crit.list().size() > 0){
                    List<Falta> faltas = crit.list();
                    faltas.stream().forEach((f) -> {
                        conexao.delete(f);
                    });
                }

                //Historicos:
                crit = conexao.createCriteria(Historico.class);
                crit.add(Restrictions.eq("Turma", turma));
                if(crit.list().size() > 0){
                    List<Historico> historicos = crit.list();
                    historicos.stream().forEach((h) -> {
                        conexao.delete(h);
                    });
                }

                //Turma:
                conexao.delete(turma);

                tx.commit();
                JOptionPane.showMessageDialog(this, "Operação realizada com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                LimparCampos();
                LiberarCampos(false);
                
            } catch(HibernateException e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            conexao.close();
        } else{
            JOptionPane.showMessageDialog(this, "Operação cancelada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:        
        conexao = HibernateUtil.openSession();
        Turma t = (Turma) conexao.get(Turma.class, Long.parseLong(lblID.getText()));
        if(t.getAlunos().size() == 0){
            JOptionPane.showMessageDialog(this, "Não há alunos para imprimir a relação!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else{
            if(JOptionPane.showConfirmDialog(this, "Deseja imprimir a relação de alunos da turma?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                //Gerando relatorio:
                HashMap map = new HashMap();
                JasperPrint jasperPrint = null;
<<<<<<< HEAD
                Connection connection = null;
                try {
                    connection = DriverManager.getConnection("jdbc:firebirdsql:/home/cadumancini/Unique/UNIQUE.FDB","sysdba","1123581321");
                } catch (SQLException ex) {
                    Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                }

                map.put("turma", Long.parseLong(lblID.getText()));
                try {
                    JasperReport compiled = JasperCompileManager.compileReport("/home/cadumancini/Unique/Unique/Relatorios/Turma.jrxml");
=======
                Connection connection = ConnectionUtil.getConnection();

                map.put("turma", Long.parseLong(lblID.getText()));
                try {
                    JasperReport compiled = ReportUtil.getReport("Turma");
>>>>>>> 57b4a00a2fad96d49b1df3fd6dbb3dae5190fa93
                    jasperPrint = JasperFillManager.fillReport(compiled, map, connection);
                    JRViewer viewer = new JRViewer(jasperPrint);
                    JFrame report = new JFrame();
                    report.setExtendedState(MAXIMIZED_BOTH);
                    report.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    report.setTitle("Relação de Turma");
                    Container c = report.getContentPane();
                    c.add(viewer);
                    report.setVisible(true);

                } catch (JRException ex) {
                    JOptionPane.showMessageDialog(this, "Não foi possível imprimir o relatório. Motivo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else{
                JOptionPane.showMessageDialog(this, "Operação cancelada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }
        }        
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        instance = null;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        fechando = true;
    }//GEN-LAST:event_formWindowClosing

    private void LiberarCampos(boolean value){
        comboBoxNivel.setEnabled(value);
        comboBoxProfessor.setEnabled(value);
        comboBoxSituacao.setEnabled(value);
        chkSeg.setEnabled(value);
        chkTer.setEnabled(value);
        chkQua.setEnabled(value);
        chkQui.setEnabled(value);
        chkSex.setEnabled(value);
        chkSab.setEnabled(value);
        txtHora.setEnabled(value);
        txtDataInicio.setEnabled(value);
        txtBoxNome.setEnabled(value);
        tabelaAlunos.setEnabled(value);
        btnSalvar.setEnabled(value);
        
        if(lblID.getText().equals(" ")){
            btnExcluir.setEnabled(false);
            btnImprimir.setEnabled(false);
        }
        else {
            btnExcluir.setEnabled(true);
            btnImprimir.setEnabled(true);
        }
    }
    
    private void LimparCampos(){
        comboBoxNivel.setSelectedIndex(0);
        comboBoxProfessor.setSelectedIndex(0);
        comboBoxSituacao.setSelectedIndex(0);
        chkSeg.setSelected(false);
        chkTer.setSelected(false);
        chkQua.setSelected(false);
        chkQui.setSelected(false);
        chkSex.setSelected(false);
        chkSab.setSelected(false);
        txtHora.setText("");
        txtDataInicio.setText("");
        txtBoxNome.setText("");
        txtNome.setText("");
        
        model = new DefaultTableModel(new String[] {"ID", "Nome", "Telefone", "Celular"}, 0);
        tabelaAlunos.removeAll();
        tabelaAlunos.setModel(model);
        
        listaAlunos.clear();
        lblID.setText(" ");
        
        txtNome.requestFocusInWindow();
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroTurmas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroTurmas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnRemoverAluno;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox chkQua;
    private javax.swing.JCheckBox chkQui;
    private javax.swing.JCheckBox chkSab;
    private javax.swing.JCheckBox chkSeg;
    private javax.swing.JCheckBox chkSex;
    private javax.swing.JCheckBox chkTer;
    private javax.swing.JComboBox comboBoxNivel;
    private javax.swing.JComboBox comboBoxProfessor;
    private javax.swing.JComboBox comboBoxSituacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblInfoNome;
    private javax.swing.JTable tabelaAlunos;
    private javax.swing.JTextField txtBoxNome;
    private javax.swing.JFormattedTextField txtDataInicio;
    private javax.swing.JFormattedTextField txtHora;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
