/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unique.Cadastros;

import Tabelas.Aluno;
import Tabelas.Cobranca;
import Tabelas.Falta;
import Tabelas.Historico;
import Tabelas.Matricula;
import Tabelas.Mensalidade;
import Tabelas.Nivel;
import Tabelas.PagtoMaterial;
import Tabelas.Responsavel;
import Tabelas.Turma;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import unique.Consultas.AlunosCadastrados;
import unique.GerarMensalidades;
import unique.MatriculaVip;
import util.HibernateUtil;

/**
 *
 * @author arlorencini
 */
public class CadastroAlunos extends javax.swing.JFrame implements WindowListener {
    Session conexao = null;
    List<Responsavel> listaResponsaveis;
    private static CadastroAlunos instance = null;
    boolean closing = false;
    
    /**
     * Creates new form CadastroAlunos
     */
    private CadastroAlunos() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Logo.png")));
        
        try{
            //Buscando os níveis cadastrados:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Nivel.class);
            select.addOrder(Order.asc("Codigo"));
            comboBoxNivel.removeAllItems();

            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                List<Nivel> temp = select.list();

                temp.stream().forEach((list) -> {
                    comboBoxNivel.addItem(list.getCodigo());
                });
            }

            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        btnEditarResp.setEnabled(false);
        
        DefaultTableModel model = new DefaultTableModel(new String[] { "Nome", "Telefone", "Celular", "Parentesco"}, 0);
        tabelaResponsaveis.setModel(model);
        
        listaResponsaveis = new ArrayList<>();
        
        //Deixando os campos inativos:
        LiberarCampos(false);
    }
    
    
    public static CadastroAlunos getInstance() {
      if (instance == null)
         instance = new CadastroAlunos();
      return instance;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtBoxNome = new javax.swing.JTextField();
        txtBoxEndereco = new javax.swing.JTextField();
        txtBoxNumero = new javax.swing.JTextField();
        txtBoxBairro = new javax.swing.JTextField();
        txtBoxCidade = new javax.swing.JTextField();
        txtBoxEmail = new javax.swing.JTextField();
        txtBoxComplemento = new javax.swing.JTextField();
        comboBoxEstado = new javax.swing.JComboBox();
        comboBoxNivel = new javax.swing.JComboBox();
        btnSalvar = new javax.swing.JButton();
        txtBoxCpf = new javax.swing.JFormattedTextField();
        txtBoxCep = new javax.swing.JFormattedTextField();
        txtBoxDtNasc = new javax.swing.JFormattedTextField();
        lblInfoNome = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBoxTelefone = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        txtBoxCelular = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaResponsaveis = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        btnAdicionarResp = new javax.swing.JButton();
        btnRemoverResp = new javax.swing.JButton();
        btnEditarResp = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        comboSituacao = new javax.swing.JComboBox();
        btnCancelar = new javax.swing.JButton();
        btnApagar = new javax.swing.JButton();
        btnContrato = new javax.swing.JButton();
        btnCarne = new javax.swing.JButton();
        txtBoxRg = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        checkAlunoVip = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Alunos");
        setType(java.awt.Window.Type.POPUP);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel1.setText("Cadastro de Alunos");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Nome:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Data de Nascimento:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("RG:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("CPF:");

        jLabel21.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel21.setText("Informações Pessoais:");

        jLabel23.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel23.setText("Informações de Contato:");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setText("Endereço:");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setText("Número:");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel25.setText("Complemento:");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setText("Bairro:");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel27.setText("CEP:");

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setText("Cidade:");

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setText("Estado:");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setText("E-Mail:");

        jLabel31.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel31.setText("Informações de Nível:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Nível Atual:");

        txtBoxNome.setColumns(50);
        txtBoxNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNome.setNextFocusableComponent(txtBoxCpf);
        txtBoxNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxNomeKeyReleased(evt);
            }
        });

        txtBoxEndereco.setColumns(50);
        txtBoxEndereco.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxEndereco.setNextFocusableComponent(txtBoxNumero);
        txtBoxEndereco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxEnderecoKeyReleased(evt);
            }
        });

        txtBoxNumero.setColumns(5);
        txtBoxNumero.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNumero.setNextFocusableComponent(txtBoxComplemento);

        txtBoxBairro.setColumns(20);
        txtBoxBairro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxBairro.setNextFocusableComponent(txtBoxCidade);
        txtBoxBairro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxBairroKeyReleased(evt);
            }
        });

        txtBoxCidade.setColumns(30);
        txtBoxCidade.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxCidade.setNextFocusableComponent(txtBoxCep);
        txtBoxCidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxCidadeKeyReleased(evt);
            }
        });

        txtBoxEmail.setColumns(30);
        txtBoxEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxEmail.setNextFocusableComponent(txtBoxTelefone);

        txtBoxComplemento.setColumns(5);
        txtBoxComplemento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxComplemento.setNextFocusableComponent(txtBoxBairro);
        txtBoxComplemento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxComplementoKeyReleased(evt);
            }
        });

        comboBoxEstado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO" }));
        comboBoxEstado.setSelectedIndex(24);
        comboBoxEstado.setToolTipText("");
        comboBoxEstado.setNextFocusableComponent(txtBoxEmail);

        comboBoxNivel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxNivel.setNextFocusableComponent(btnEditarResp);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/dialog-ok.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setNextFocusableComponent(txtBoxNome);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        txtBoxCpf.setColumns(14);
        try {
            txtBoxCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxCpf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxCpf.setNextFocusableComponent(txtBoxRg);
        txtBoxCpf.setPreferredSize(new java.awt.Dimension(180, 26));
        txtBoxCpf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxCpfFocusLost(evt);
            }
        });

        txtBoxCep.setColumns(9);
        try {
            txtBoxCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxCep.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxCep.setNextFocusableComponent(comboBoxEstado);

        txtBoxDtNasc.setColumns(10);
        try {
            txtBoxDtNasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxDtNasc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxDtNasc.setNextFocusableComponent(comboSituacao);

        lblInfoNome.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        lblInfoNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        lblInfoNome.setText("huehue");
        lblInfoNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseExited(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Telefone:");

        try {
            txtBoxTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) ####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxTelefone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxTelefone.setNextFocusableComponent(txtBoxCelular);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Celular:");

        try {
            txtBoxCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxCelular.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxCelular.setNextFocusableComponent(comboBoxNivel);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("ID:");

        lblId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        tabelaResponsaveis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Telefone", "Celular", "Parentesco"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaResponsaveis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaResponsaveisMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaResponsaveis);

        jLabel13.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel13.setText("Responsáveis:");

        btnAdicionarResp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-add - SMALL.png"))); // NOI18N
        btnAdicionarResp.setText("Adicionar");
        btnAdicionarResp.setNextFocusableComponent(btnSalvar);
        btnAdicionarResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarRespActionPerformed(evt);
            }
        });

        btnRemoverResp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnRemoverResp.setText("Remover");
        btnRemoverResp.setNextFocusableComponent(btnAdicionarResp);
        btnRemoverResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverRespActionPerformed(evt);
            }
        });

        btnEditarResp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/gtk-edit.png"))); // NOI18N
        btnEditarResp.setText("Editar");
        btnEditarResp.setNextFocusableComponent(btnRemoverResp);
        btnEditarResp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarRespActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Situação:");

        comboSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Inativo" }));
        comboSituacao.setNextFocusableComponent(txtBoxEndereco);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setNextFocusableComponent(txtBoxNome);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnApagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        btnApagar.setText("Apagar Aluno");
        btnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarActionPerformed(evt);
            }
        });

        btnContrato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/edit-find.png"))); // NOI18N
        btnContrato.setText("Reimprimir Contrato");
        btnContrato.setEnabled(false);
        btnContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContratoActionPerformed(evt);
            }
        });

        btnCarne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/gtk-edit.png"))); // NOI18N
        btnCarne.setText("Carnê de Pagto.");
        btnCarne.setEnabled(false);
        btnCarne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarneActionPerformed(evt);
            }
        });

        txtBoxRg.setColumns(50);
        txtBoxRg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxRg.setNextFocusableComponent(txtBoxDtNasc);
        txtBoxRg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxRgKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Aluno VIP:");

        checkAlunoVip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        checkAlunoVip.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel22)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel30)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBoxEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBoxNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBoxComplemento))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBoxBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBoxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtBoxCep, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel29)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtBoxEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtBoxCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel12))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtBoxRg, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtBoxDtNasc, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                            .addComponent(lblId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtBoxTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboBoxNivel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(checkAlunoVip))
                                            .addComponent(txtBoxCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblInfoNome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnEditarResp)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnRemoverResp)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnAdicionarResp))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel13)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel23)
                            .addComponent(jLabel21)
                            .addComponent(jLabel31))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCarne)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnContrato)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApagar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBoxCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12)
                    .addComponent(lblId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtBoxDtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtBoxRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(txtBoxEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(txtBoxNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25)
                            .addComponent(txtBoxComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(txtBoxBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28)
                            .addComponent(txtBoxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(txtBoxCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(txtBoxEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdicionarResp)
                            .addComponent(btnRemoverResp)
                            .addComponent(btnEditarResp)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBoxTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBoxCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkAlunoVip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel10)
                        .addComponent(comboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnCancelar)
                    .addComponent(btnApagar)
                    .addComponent(btnContrato)
                    .addComponent(btnCarne))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        boolean salvar = true;
        boolean mudouNivel = false;
        
        if(txtBoxNome.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo Nome não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxNome.requestFocusInWindow();
        } else if(txtBoxEndereco.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo Endereço não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxEndereco.requestFocusInWindow();
        } else if(txtBoxNumero.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo Número não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxNumero.requestFocusInWindow();
        } else if(txtBoxBairro.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo Bairro não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxBairro.requestFocusInWindow();
        } else if(txtBoxCep.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo CEP não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxCep.requestFocusInWindow();
        } else if(txtBoxCidade.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "O campo Cidade não pode ficar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            salvar = false;
            txtBoxCidade.requestFocusInWindow();
        }
        
        // Verificar se já existe um aluno com esse nome,
        // caso estiver cadastrando um aluno novo.
        if(lblId.getText().isEmpty() && !txtBoxNome.getText().isEmpty()){
            // Pesquisar aluno por nome:
            try{
                //Verificando se existe o nome cadastrado no banco:
                conexao = HibernateUtil.openSession();
                Criteria select = conexao.createCriteria(Aluno.class);
                select.add(Restrictions.like("Nome", txtBoxNome.getText(), MatchMode.EXACT));

                if(select.list().size() > 0){
                    if(JOptionPane.showConfirmDialog(this, "Já existe um aluno cadastrado com esse nome. Deseja incluir mesmo assim?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION){
                        JOptionPane.showMessageDialog(this, "Operação de cadastro cancelada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        salvar = false;
                        btnCancelarActionPerformed(null);
                    }
                }

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

        //Conecatando com o hibernate:
        conexao = HibernateUtil.openSession();

        //Obtendo o aluno do banco:
        if(!lblId.getText().isEmpty()){
            Aluno aluno = (Aluno) conexao.get(Aluno.class, Long.parseLong(lblId.getText()));
            //O aluno mudou de nível?
            if((!aluno.getNivelAtual().getCodigo().equals(comboBoxNivel.getSelectedItem().toString())) && (aluno != null)){
                mudouNivel = true;
                Criteria crit = conexao.createCriteria(Mensalidade.class);
                crit.add(Restrictions.eq("Aluno", aluno));
                crit.add(Restrictions.eq("Nivel", aluno.getNivelAtual()));
                crit.add(Restrictions.eq("Paga", false));

                if(crit.list().size() > 0){
                    if(JOptionPane.showConfirmDialog(this, "O Aluno " + aluno.getNome() + " possui mensalidades pendentes para o nível " + aluno.getNivelAtual().getCodigo() + ". Deseja alterar seu nível mesmo assim?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION){
                        JOptionPane.showMessageDialog(this, "Operação de matrícula cancelada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        salvar = false;
                    }
                }
            }
        }
        
        //Temos responsáveis?
        if(listaResponsaveis.size() <= 0 && salvar){
            if(JOptionPane.showConfirmDialog(null, "O aluno será cadastrado sem responsáveis. Continuar?", "Aviso", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION){
                JOptionPane.showMessageDialog(this, "Operação de matrícula cancelada!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                salvar = false;
            }
        }
        Nivel nivel = null;
        
        try{
            //Buscando o nivel:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Nivel.class);
            select.add(Restrictions.like("Codigo", comboBoxNivel.getSelectedItem().toString(), MatchMode.EXACT));
            select.addOrder(Order.asc("Codigo"));

            if(select.list().size() > 0){
                nivel = (Nivel)select.list().get(0);
            }

            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        if(checkAlunoVip.isSelected() && nivel != null && !nivel.isVIP()){
            JOptionPane.showMessageDialog(this, "O aluno foi marcado como VIP, mas o nível selecionado não é VIP.", "Erro", JOptionPane.ERROR_MESSAGE);
            comboBoxNivel.requestFocusInWindow();
            salvar = false;
        } else if(!checkAlunoVip.isSelected() && nivel != null && nivel.isVIP()){
            JOptionPane.showMessageDialog(this, "O aluno não foi marcado como VIP, mas o nível selecionado é VIP.", "Erro", JOptionPane.ERROR_MESSAGE);
            comboBoxNivel.requestFocusInWindow();
            salvar = false;
        }
        
        if(salvar){
            //Adicionando para o banco:
            Aluno temp = new Aluno();

            temp.setNome(txtBoxNome.getText());
            temp.setCPF(txtBoxCpf.getText());
            temp.setRG(txtBoxRg.getText());
            if(comboSituacao.getSelectedIndex() == 0){
                temp.setAtivo(true);
            } else{
                temp.setAtivo(false);
            }
            temp.setEndereco(txtBoxEndereco.getText());
            temp.setNumero(Long.parseLong(txtBoxNumero.getText()));
            temp.setComplemento(txtBoxComplemento.getText());
            temp.setBairro(txtBoxBairro.getText());
            temp.setCEP(txtBoxCep.getText());
            temp.setCidade(txtBoxCidade.getText());
            temp.setEstado(comboBoxEstado.getSelectedItem().toString());
            temp.setEmail(txtBoxEmail.getText());
            temp.setDesconto(0L);
            temp.setTelefone(txtBoxTelefone.getText());
            temp.setCelular(txtBoxCelular.getText());
            temp.setVip(checkAlunoVip.isSelected());
            
            if(comboSituacao.getSelectedIndex() == 0) {
                temp.setAtivo(true);
            } else {
                temp.setAtivo(false);
            }
            
            try{
                temp.setID(Long.parseLong(lblId.getText()));
            }catch(NumberFormatException e){
                
            }
            
            temp.setTurmas(new ArrayList<>());
            temp.setNivelAtual(nivel);

            //Obtendo a data:
            try {
                Date dataTemporaria = DateFormat.getDateInstance().parse(txtBoxDtNasc.getText());
                temp.setNascimento(dataTemporaria);
            } catch (ParseException ex) {
                Logger.getLogger(CadastroAlunos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Transaction tx; 
            try{
                //Inicializando o Hibernate:
                conexao = HibernateUtil.openSession();
                tx = conexao.beginTransaction();
                conexao.saveOrUpdate(temp);
                tx.commit();
                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
            try{
                //Limpando os responsáveis:
                conexao =  HibernateUtil.openSession();
                tx = conexao.beginTransaction();
                Criteria selectResponsaveis = conexao.createCriteria(Responsavel.class);
                selectResponsaveis.add(Restrictions.eq("Aluno", temp));

                if(selectResponsaveis.list().size() > 0) {
                    List<Responsavel> listaTemp = selectResponsaveis.list();
                    for(Responsavel resp : listaTemp) {
                       conexao.delete(resp);
                    }
                    tx.commit();
                }

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
            //Temos responáveis para salvar?
            if(listaResponsaveis.size() > 0){
                conexao = HibernateUtil.openSession();
                tx = conexao.beginTransaction();
                
                //Cadastrando cada responsável:
                for(Responsavel resp : listaResponsaveis){
                    //Salvando:
                    resp.setAluno(temp);
                    resp.setID(null);
                    conexao.saveOrUpdate(resp);
                }
                try{
                    tx.commit();    
                    conexao.close();
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            
            //Limpando a tela:
            LiberarCampos(false);
            
            //Recarregando:
            LoadInfoForStudent(temp.getID());
            
            conexao = HibernateUtil.openSession();
            Criteria crit = conexao.createCriteria(Mensalidade.class);
            crit.add(Restrictions.eq("Aluno", temp));
            crit.add(Restrictions.eq("Nivel", temp.getNivelAtual()));
            
            Criteria critMensMaterial = conexao.createCriteria(PagtoMaterial.class);
            critMensMaterial.add(Restrictions.eq("Aluno", temp));
            critMensMaterial.add(Restrictions.eq("Nivel", temp.getNivelAtual()));
            
            boolean chamarTela = true;
            
            //Temos mensalidades ou matrículas nesse nível?
            if(crit.list().size() > 0 && temp.isAtivo() && !temp.isVip()){
                if(JOptionPane.showConfirmDialog(this, "O Aluno " + temp.getNome() + 
                        " possui mensalidades geradas para o nível " + temp.getNivelAtual().getCodigo() + 
                        ". Deseja limpar e gerar novamente?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                    tx = conexao.beginTransaction();
                    chamarTela = true;

                    try{
                        //Apagando as mensalidades de cursos:
                        List<Mensalidade> mensalidades = crit.list();
                        mensalidades.stream().forEach((m) -> {
                            conexao.delete(m);
                        });

                        //Apagando as mensalidades de material:
                        List<PagtoMaterial> mensalidadesMaterial = critMensMaterial.list();
                        mensalidadesMaterial.stream().forEach((m) -> {
                            conexao.delete(m);
                        });

                        tx.commit();
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    } 

                    //Buscando matricula para o nivel, e excluindo caso existir.
                    crit = conexao.createCriteria(Matricula.class);
                    crit.add(Restrictions.eq("Aluno", temp));
                    crit.add(Restrictions.eq("Nivel", temp.getNivelAtual()));
                    if(crit.list().size() > 0){
                        try{
                            tx = conexao.beginTransaction();
                            List<Matricula> matriculas = crit.list();
                            matriculas.stream().forEach((m) -> {
                                conexao.delete(m);
                            });
                            tx.commit();
                        } catch(Exception e){
                            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else
                    chamarTela = false;
            } else if(crit.list().size() > 0 && !temp.isAtivo()){
                if(JOptionPane.showConfirmDialog(this, "O aluno está marcado como inativo, mas possui mensalidades em aberto. Deseja excluí-las?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                    tx = conexao.beginTransaction();
                    
                    try{
                        //Apagando as mensalidades de cursos (mensalidades de material não devem ser exlcuídas aqui):
                        List<Mensalidade> mensalidades = crit.list();
                        mensalidades.stream().forEach((m) -> {
                            //Limpando cobranças daquela mensalidade:
                            Criteria cobrancas = conexao.createCriteria(Cobranca.class);
                            cobrancas.add(Restrictions.eq("Mensalidade", m));
                            if(cobrancas.list().size() > 0){
                                try{
                                    List<Cobranca> cobs = cobrancas.list();
                                    cobs.stream().forEach((c) -> {
                                        conexao.delete(c);
                                    });
                                } catch(Exception e){
                                    JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            if(!m.isPaga())
                                conexao.delete(m);
                        });

                        tx.commit();
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
                chamarTela = false;
                JOptionPane.showMessageDialog(this, "Mensalidades excluídas com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
            
            conexao.close();
            conexao = HibernateUtil.openSession();
            
            //O aluno é vip?
            if(temp.isVip() && temp.isAtivo()) {
                //Buscando matricula para o nivel, e excluindo caso existir.
                Criteria critVip = conexao.createCriteria(Tabelas.MatriculaVip.class);
                critVip.add(Restrictions.eq("Aluno", temp));
                critVip.add(Restrictions.eq("Nivel", temp.getNivelAtual()));
                int size = critVip.list().size();
                if(critVip.list().size() > 0){
                    if(JOptionPane.showConfirmDialog(this, "O Aluno " + temp.getNome() + " já possui uma matrícula para o nível " + temp.getNivelAtual().getCodigo() + ". Deseja gerar novamente?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                        try{
                            tx = conexao.beginTransaction();
                            List<Tabelas.MatriculaVip> matriculas = critVip.list();
                            matriculas.stream().forEach((m) -> {
                                conexao.delete(m);
                            });
        
                            crit = conexao.createCriteria(Mensalidade.class);
                            crit.add(Restrictions.eq("Aluno", temp));
                            crit.add(Restrictions.eq("Nivel", temp.getNivelAtual()));

                            //Apagando as mensalidades de cursos:
                            List<Mensalidade> mensalidades = crit.list();
                            mensalidades.stream().forEach((m) -> {
                                conexao.delete(m);
                            });

                            critMensMaterial = conexao.createCriteria(PagtoMaterial.class);
                            critMensMaterial.add(Restrictions.eq("Aluno", temp));
                            critMensMaterial.add(Restrictions.eq("Nivel", temp.getNivelAtual()));

                            //Apagando as mensalidades de material:
                            List<PagtoMaterial> mensalidadesMaterial = critMensMaterial.list();
                            mensalidadesMaterial.stream().forEach((m) -> {
                                conexao.delete(m);
                            });
                        
                            tx.commit();
                        } catch(Exception e){
                            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }   
                }
                
                conexao.close();
                unique.MatriculaVip matricula = new MatriculaVip(temp);
                matricula.setVisible(true);
            } else {
                if(chamarTela) {
                    GerarMensalidades janela = GerarMensalidades.getInstance();
                    janela.preencherCampos(temp);
                    janela.setVisible(rootPaneCheckingEnabled);
                }
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtBoxCpfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxCpfFocusLost

    }//GEN-LAST:event_txtBoxCpfFocusLost

    private void txtBoxNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNomeKeyReleased
        //Pesquisando no banco:
        if(txtBoxNome.getText().length() != 0){
            //Passando para UPPERCASE:
            txtBoxNome.setText(txtBoxNome.getText().toUpperCase());
            
            //Liberando os campos:
            LiberarCampos(true);
            
            try{
                //Verificando se existe o nome cadastrado no banco:
                conexao = HibernateUtil.openSession();
                Criteria select = conexao.createCriteria(Aluno.class);
                select.add(Restrictions.like("Nome", txtBoxNome.getText(), MatchMode.ANYWHERE));

                if(select.list().size() > 0){
                    lblInfoNome.setText("Foram encontrados " + select.list().size() + " resultados semelhantes já cadastrados. Clique para visualizar.");
                    lblInfoNome.setVisible(true);
                }else{
                    lblInfoNome.setVisible(false);
                }

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            lblInfoNome.setVisible(false);
        }
    }//GEN-LAST:event_txtBoxNomeKeyReleased

    private void txtBoxEnderecoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxEnderecoKeyReleased
        //Passando para UPPERCASE:
        txtBoxEndereco.setText(txtBoxEndereco.getText().toUpperCase());
    }//GEN-LAST:event_txtBoxEnderecoKeyReleased

    private void txtBoxComplementoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxComplementoKeyReleased
        //Passando para UPPERCASE:
        txtBoxComplemento.setText(txtBoxComplemento.getText().toUpperCase());
    }//GEN-LAST:event_txtBoxComplementoKeyReleased

    private void txtBoxBairroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxBairroKeyReleased
        //Passando para UPPERCASE:
        txtBoxBairro.setText(txtBoxBairro.getText().toUpperCase());
    }//GEN-LAST:event_txtBoxBairroKeyReleased

    private void txtBoxCidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxCidadeKeyReleased
        //Passando para UPPERCASE:
        txtBoxCidade.setText(txtBoxCidade.getText().toUpperCase());
    }//GEN-LAST:event_txtBoxCidadeKeyReleased

    private void lblInfoNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseClicked
        //Abrindo a janela de consulta:
        AlunosCadastrados consultaAlunos = AlunosCadastrados.getInstance(txtBoxNome.getText(), AlunosCadastrados.CALLER.CALLER_CADASTRO);
        consultaAlunos.SetJanelaPai(this);
        
        consultaAlunos.setVisible(true);
    }//GEN-LAST:event_lblInfoNomeMouseClicked

    private void lblInfoNomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseEntered
        lblInfoNome.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseEntered

    private void lblInfoNomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseExited
        lblInfoNome.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseExited

    private void btnAdicionarRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarRespActionPerformed
        CadastroResponsaveis janela = CadastroResponsaveis.getInstance(this);
        janela.setVisible(true);
    }//GEN-LAST:event_btnAdicionarRespActionPerformed

    private void tabelaResponsaveisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaResponsaveisMouseClicked
        //Selecionamos algum responsavel?
        if(tabelaResponsaveis.getSelectedRow() >= 0){
            btnEditarResp.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaResponsaveisMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        
    }//GEN-LAST:event_formFocusGained

    private void btnRemoverRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverRespActionPerformed
        //Temos algo selecionado na tabela?
        if(tabelaResponsaveis.getSelectedRow() >= 0){
            int linha = tabelaResponsaveis.getSelectedRow();
            
            DefaultTableModel newModel = (DefaultTableModel) tabelaResponsaveis.getModel();
            newModel.removeRow(linha);
            
            //Removendo da Lista:
            listaResponsaveis.remove(linha);
            
            AtualizaTabelaResponsaveis();
        }
    }//GEN-LAST:event_btnRemoverRespActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // Limpando responsaveis:
        int x = tabelaResponsaveis.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tabelaResponsaveis.getModel();
        for(int i = 0; i < x; i++){
            model.removeRow(0);
        }
        listaResponsaveis.clear();
        
        //Limpando outros campos:
        txtBoxNome.setText("");
        txtBoxCpf.setText("");
        txtBoxRg.setText("");
        lblId.setText("");
        txtBoxDtNasc.setText("");
        comboSituacao.setSelectedIndex(0);
        txtBoxEndereco.setText("");
        txtBoxNumero.setText("");
        txtBoxComplemento.setText("");
        txtBoxBairro.setText("");
        txtBoxCidade.setText("");
        txtBoxCep.setText("");
        comboBoxEstado.setSelectedIndex(24);
        txtBoxEmail.setText("");
        txtBoxTelefone.setText("");
        txtBoxCelular.setText("");
        comboBoxNivel.setSelectedIndex(0);
        btnContrato.setEnabled(false);
        btnCarne.setEnabled(false);
        checkAlunoVip.setSelected(false);
        
        txtBoxNome.requestFocusInWindow();
        LiberarCampos(false);
        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEditarRespActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarRespActionPerformed
        //Procurando o responável na lista:
        if(tabelaResponsaveis.getSelectedRow() >= 0){
            String nome = (String)tabelaResponsaveis.getValueAt(tabelaResponsaveis.getSelectedRow(), 0);
            String telefone = (String)tabelaResponsaveis.getValueAt(tabelaResponsaveis.getSelectedRow(), 1);
            
            for(Responsavel resp : listaResponsaveis){
                if(resp.getTelefone().equals(telefone) && resp.getNome().equals(nome)) {
                    //Passando para a tela de edição:
                    CadastroResponsaveis cadastro = CadastroResponsaveis.getInstance(this);
                    cadastro.CarregarInfoResponsavel(resp, tabelaResponsaveis.getSelectedRow());
                    cadastro.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_btnEditarRespActionPerformed

    private void btnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarActionPerformed
        //Exibindo a confirmação:
        if(JOptionPane.showConfirmDialog(this, "Deseja realmente EXCLUIR o aluno do banco de cadastros?\n(Essa operação não pode ser desfeita!)", "Aviso!", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION){
            try{
                //Conecatando com o hibernate:
                conexao = HibernateUtil.openSession();
                Transaction tx = conexao.beginTransaction();

                //Obtendo o aluno do banco:
                Aluno aluno = (Aluno) conexao.get(Aluno.class, Long.parseLong(lblId.getText()));

                //Removendo os responsáveis desse aluno:
                Criteria selectResp = conexao.createCriteria(Responsavel.class);
                selectResp.add(Restrictions.eq("Aluno", aluno));

                List<Responsavel> listResp = selectResp.list();

                for(Responsavel temp : listResp) {
                    conexao.delete(temp);
                }

                //Removendo as mensalidades desse aluno:
                Criteria selectMens = conexao.createCriteria(Mensalidade.class);
                selectMens.add(Restrictions.eq("Aluno", aluno));

                List<Mensalidade> listMens = selectMens.list();

                for(Mensalidade temp : listMens) {
                    conexao.delete(temp);
                }

                //Removendo os pagamentos de materiais desse aluno:
                Criteria selectPagtos = conexao.createCriteria(PagtoMaterial.class);
                selectPagtos.add(Restrictions.eq("Aluno", aluno));

                List<PagtoMaterial> listPagtos = selectPagtos.list();

                for(PagtoMaterial temp : listPagtos) {
                    conexao.delete(temp);
                }

                //Removendo as faltas desse aluno:
                Criteria selectFaltas = conexao.createCriteria(Falta.class);
                selectFaltas.add(Restrictions.eq("Aluno", aluno));

                List<Falta> listFaltas = selectFaltas.list();

                for(Falta temp : listFaltas) {
                    conexao.delete(temp);
                }

                //Removendo o histórico desse aluno:
                Criteria selectHisto = conexao.createCriteria(Historico.class);
                selectHisto.add(Restrictions.eq("Aluno", aluno));

                List<Historico> listHisto = selectHisto.list();

                for(Historico temp : listHisto) {
                    conexao.delete(temp);
                }

                //Removendo as matriculas desse aluno:
                Criteria selectMatri = conexao.createCriteria(Matricula.class);
                selectMatri.add(Restrictions.eq("Aluno", aluno));

                List<Matricula> listMatri = selectMatri.list();

                for(Matricula temp : listMatri) {
                    conexao.delete(temp);
                }
                
                //Removendo as matriculas VIP desse aluno:
                Criteria selectMatriVip = conexao.createCriteria(Tabelas.MatriculaVip.class);
                selectMatriVip.add(Restrictions.eq("Aluno", aluno));

                List<Tabelas.MatriculaVip> listMatriVip = selectMatriVip.list();

                for(Tabelas.MatriculaVip temp : listMatriVip) {
                    conexao.delete(temp);
                }
                
                //Removendo as turmas desse aluno:
                List<Turma> listTurma = aluno.getTurmas();

                for(Turma turma : listTurma) {
                    turma.getAlunos().remove(aluno);
                    conexao.saveOrUpdate(turma);
                }

                //Excluindo esse ID do banco:
                conexao.delete(aluno);
                tx.commit();

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
            btnCancelarActionPerformed(null);
            LiberarCampos(false);
        }
    }//GEN-LAST:event_btnApagarActionPerformed

    private void btnContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContratoActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Deseja reimprimir o contrato do aluno?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            //Conecatando com o hibernate:
            conexao = HibernateUtil.openSession();

            //Obtendo o aluno do banco:
            Aluno aluno = (Aluno) conexao.get(Aluno.class, Long.parseLong(lblId.getText()));

            //Gerando relatorio:
            HashMap map = new HashMap();
            JasperPrint jasperPrint = null;
            Connection connection = null;
            try {
                connection = DriverManager.getConnection("jdbc:firebirdsql:localhost:C:\\Banco\\UNIQUE.FDB","sysdba","1123581321");
            } catch (SQLException ex) {
                Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }

            map.put("AlunoID", aluno.getID());
            try {
                JasperReport compiled;
                if(aluno.isVip())
                    compiled = JasperCompileManager.compileReport("C:\\Banco\\Relatorios\\ContratoVip.jrxml");
                else
                    compiled = JasperCompileManager.compileReport("C:\\Banco\\Relatorios\\Contrato.jrxml");
                    
                jasperPrint = JasperFillManager.fillReport(compiled, map, connection);
                JRViewer viewer = new JRViewer(jasperPrint);
                JFrame report = new JFrame();
                report.setExtendedState(MAXIMIZED_BOTH);
                report.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                report.setTitle("Contrato de Matrícula");
                Container c = report.getContentPane();
                c.add(viewer);
                report.setVisible(true);

            } catch (JRException ex) {
                Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Não foi possível listar o contrato. Motivo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnContratoActionPerformed

    private void btnCarneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarneActionPerformed
        if(JOptionPane.showConfirmDialog(this, "Deseja reimprimir o carnê de pagamento?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            //Conecatando com o hibernate:
            conexao = HibernateUtil.openSession();

            //Obtendo o aluno do banco:
            Aluno aluno = (Aluno) conexao.get(Aluno.class, Long.parseLong(lblId.getText()));

            //Gerando relatorio:
            HashMap map = new HashMap();
            JasperPrint jasperPrint = null;
            Connection connection = null;
            try {
                connection = DriverManager.getConnection("jdbc:firebirdsql:localhost:C:\\Banco\\UNIQUE.FDB","sysdba","1123581321");
            } catch (SQLException ex) {
                Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }

            map.put("AlunoID", aluno.getID());
            try {
                JasperReport compiled = JasperCompileManager.compileReport("C:\\Banco\\Relatorios\\Carne.jrxml");
                jasperPrint = JasperFillManager.fillReport(compiled, map, connection);
                JRViewer viewer = new JRViewer(jasperPrint);
                JFrame report = new JFrame();
                report.setExtendedState(MAXIMIZED_BOTH);
                report.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                report.setTitle("Carnê de Pagamento");
                Container c = report.getContentPane();
                c.add(viewer);
                report.setVisible(true);

            } catch (JRException ex) {
                Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Não foi possível listar o contrato. Motivo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCarneActionPerformed

    private void txtBoxRgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxRgKeyReleased
        // TODO add your handling code here:
        txtBoxRg.setText(txtBoxRg.getText().toUpperCase());
    }//GEN-LAST:event_txtBoxRgKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        instance = null;
    }//GEN-LAST:event_formWindowClosed

    public void AtualizaTabelaResponsaveis(){
        //Atualizando a tabela de responsáveis:
        DefaultTableModel newModel = (DefaultTableModel) tabelaResponsaveis.getModel();
        newModel.setRowCount(0);
        
        //Adicionando:
        listaResponsaveis.stream().forEach((list) -> {
                newModel.addRow(new Object[]{ list.getNome(), list.getTelefone(), list.getCelular(), list.getGrauParentesco() });
            });
        
        resizeColumnWidth(tabelaResponsaveis);
    }
    
    public void SalvarResponsavel(Responsavel responsavel, int positionOnTable) {
        //Estamos adicionando um novo responsavel?
        if(positionOnTable >= 0) {
            //Removendo a posição atual:
            listaResponsaveis.remove(positionOnTable);
        }
        
        //Salvando a nova:
        listaResponsaveis.add(responsavel);
        
        //Atualizando:
        AtualizaTabelaResponsaveis();
    }
    
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
    public void LoadInfoForStudent(Long id){
        //Liberando os campos:
        LiberarCampos(true);
        
        System.out.println("ID RECEBIDO: " + id.toString());
        
        boolean encontrou = false;

        try{
            //Verificando se existe o nome cadastrado no banco:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Aluno.class);
            select.add(Restrictions.eq("ID", id));

            if(select.list().size() > 0){
                //Liberando os campos:
                LiberarCampos(true);

                //Adicionando os valores na tabela:
                List<Aluno> temp = select.list();

                temp.stream().forEach((Aluno list) -> {
                    txtBoxNome.setText(list.getNome());

                    if(!"   .   .   -  ".equals(list.getCPF())){
                        txtBoxCpf.setText(list.getCPF());
                    } else{
                        txtBoxCpf.setText("");
                    }

                    txtBoxRg.setText(list.getRG());

                    Date data = list.getNascimento();
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");     

                    txtBoxDtNasc.setText(df.format(data));

                    if(list.isAtivo()){
                        comboSituacao.setSelectedIndex(0);

                        if(list.getNivelAtual() != null){
                            btnContrato.setEnabled(true);
                            if(!list.isVip())
                                btnCarne.setEnabled(true);
                        }
                    } else{
                        comboSituacao.setSelectedIndex(1);
                    }
                    txtBoxEndereco.setText(list.getEndereco());
                    txtBoxNumero.setText(list.getNumero().toString());
                    txtBoxComplemento.setText(list.getComplemento());
                    txtBoxBairro.setText(list.getBairro());
                    txtBoxCidade.setText(list.getCidade());
                    txtBoxCep.setText(list.getCEP());
                    comboBoxEstado.setSelectedItem(list.getEstado());
                    txtBoxEmail.setText(list.getEmail());
                    comboBoxNivel.setSelectedItem(list.getNivelAtual().getCodigo());
                    txtBoxTelefone.setText(list.getTelefone());
                    txtBoxCelular.setText(list.getCelular());
                    lblId.setText(list.getID().toString());
                    checkAlunoVip.setSelected(list.isVip());
                });

                //Liberando o botão para excluir:
                btnApagar.setEnabled(true);

                encontrou = true;
            }

            //Inicializando o Hibernate:
            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        //Encontramos um aluno?
        if(encontrou){
            //Buscando os responsáveis:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Responsavel.class);
            select.add(Restrictions.eq("Aluno", (Aluno)conexao.get(Aluno.class, Long.parseLong(lblId.getText()))));
            
            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                listaResponsaveis = select.list();
                
                AtualizaTabelaResponsaveis();
            }
        }

        txtBoxNome.requestFocusInWindow();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroAlunos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroAlunos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroAlunos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroAlunos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroAlunos().setVisible(true);
        });
    }
    
    public final void LiberarCampos(boolean value){
        txtBoxNome.setEnabled(true);
        
        txtBoxCpf.setEnabled(value);
        txtBoxRg.setEnabled(value);
        comboSituacao.setEnabled(value);
        txtBoxDtNasc.setEnabled(value);
        txtBoxEndereco.setEnabled(value);
        txtBoxNumero.setEnabled(value);
        txtBoxComplemento.setEnabled(value);
        txtBoxBairro.setEnabled(value);
        txtBoxCidade.setEnabled(value);
        txtBoxCep.setEnabled(value);
        comboBoxEstado.setEnabled(value);
        txtBoxEmail.setEnabled(value);
        comboBoxNivel.setEnabled(value);
        //comboBoxTurma.setEnabled(value);
        //txtBoxDesconto.setEnabled(value);
        txtBoxTelefone.setEnabled(value);
        txtBoxCelular.setEnabled(value);
        btnApagar.setEnabled(value);
        checkAlunoVip.setEnabled(value);
        
        lblInfoNome.setVisible(false);
        lblId.setVisible(true);
        
        DefaultTableModel model = new DefaultTableModel(new String[] { "Nome", "Telefone", "Celular", "Parentesco"}, 0);
        tabelaResponsaveis.setModel(model);
        
        checkAlunoVip.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarResp;
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCarne;
    private javax.swing.JButton btnContrato;
    private javax.swing.JButton btnEditarResp;
    private javax.swing.JButton btnRemoverResp;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JCheckBox checkAlunoVip;
    private javax.swing.JComboBox comboBoxEstado;
    private javax.swing.JComboBox comboBoxNivel;
    private javax.swing.JComboBox comboSituacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblInfoNome;
    private javax.swing.JTable tabelaResponsaveis;
    private javax.swing.JTextField txtBoxBairro;
    private javax.swing.JFormattedTextField txtBoxCelular;
    private javax.swing.JFormattedTextField txtBoxCep;
    private javax.swing.JTextField txtBoxCidade;
    private javax.swing.JTextField txtBoxComplemento;
    private javax.swing.JFormattedTextField txtBoxCpf;
    private javax.swing.JFormattedTextField txtBoxDtNasc;
    private javax.swing.JTextField txtBoxEmail;
    private javax.swing.JTextField txtBoxEndereco;
    private javax.swing.JTextField txtBoxNome;
    private javax.swing.JTextField txtBoxNumero;
    private javax.swing.JTextField txtBoxRg;
    private javax.swing.JFormattedTextField txtBoxTelefone;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        closing = true;
    }

    @Override
    public void windowIconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
