/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unique.Consultas;

import Tabelas.Aluno;
import Tabelas.Mensalidade;
import Tabelas.Nivel;
import Tabelas.PagtoMaterial;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import unique.Cobrancas;
import util.HibernateUtil;

/**
 *
 * @author CarlosEduardo
 */
public class ConsultaMensalidades extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaMensalidades
     */
    Session conexao;
    Transaction tx;
    private static ConsultaMensalidades instance = null;
    String sqlIdAluno, sqlNomeAluno, sqlCodigoNivel, sqlPeriodo, sqlPagto, sqlStatus;
    boolean fechando = false;
    
    private ConsultaMensalidades(long codigoAluno) {
        initComponents();
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Logo.png")));
        lblInfoNome.setVisible(false);
        
        if(codigoAluno >= 0){
            txtCodigoAluno.setText(String.valueOf(codigoAluno));
            btnConsultarActionPerformed(null);
        }else{
            txtCodigoAluno.requestFocusInWindow();
        }
    }
    
    public static ConsultaMensalidades getInstance(long codigoAluno) {
        if (instance == null)
            instance = new ConsultaMensalidades(codigoAluno);
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox();
        txtCodigoAluno = new javax.swing.JTextField();
        txtNomeAluno = new javax.swing.JTextField();
        txtPeriodo = new javax.swing.JFormattedTextField();
        txtCodigoNivel = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMensalidades = new javax.swing.JTable();
        btnConsultar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lblInfoNome = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMaterial = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        lblVlrPago = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblVlrPendente = new javax.swing.JLabel();
        btnObs = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtPeriodoPagto = new javax.swing.JFormattedTextField();
        btnImprimir = new javax.swing.JButton();
        btnEstornarMens = new javax.swing.JButton();
        btnEstornarMat = new javax.swing.JButton();
        btnCobrancas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pesquisa de Mensalidades");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Código do Aluno:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Nome do Aluno:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Período de Vencto.:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Código do Nível:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Status:");

        comboStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Pendentes", "Pagas" }));
        comboStatus.setNextFocusableComponent(txtPeriodoPagto);

        txtCodigoAluno.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCodigoAluno.setNextFocusableComponent(txtNomeAluno);

        txtNomeAluno.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtNomeAluno.setNextFocusableComponent(txtPeriodo);
        txtNomeAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeAlunoKeyReleased(evt);
            }
        });

        try {
            txtPeriodo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/####-##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPeriodo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPeriodo.setNextFocusableComponent(txtCodigoNivel);
        txtPeriodo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPeriodoFocusLost(evt);
            }
        });

        txtCodigoNivel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCodigoNivel.setNextFocusableComponent(comboStatus);
        txtCodigoNivel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoNivelKeyReleased(evt);
            }
        });

        tblMensalidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Aluno", "Nome Aluno", "Nível", "Vencimento", "Valor Aulas (R$)", "Valor Pago (R$)", "Status", "Data Pagto", "Número do Cheque", "Data do Cheque"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMensalidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMensalidadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMensalidades);

        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/edit-find.png"))); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setNextFocusableComponent(btnConsultar);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblInfoNome.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        lblInfoNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        lblInfoNome.setText("huehue");
        lblInfoNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel6.setText("Pesquisa de Mensalidades");
        jLabel6.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Parcelas referentes a Aulas:");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Parcelas referentes ao pagamento de materiais:");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        tableMaterial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Aluno", "Nome Aluno", "Nível", "Valor Pago(R$)", "Data Pgto.", "Número do Cheque", "Data do Cheque"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMaterial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMaterialMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableMaterial);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Valor já pago por esse aluno (Referente ao material):");

        lblVlrPago.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Valor Pendente (Referente ao material):");

        lblVlrPendente.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N

        btnObs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/gtk-edit.png"))); // NOI18N
        btnObs.setText("Observações");
        btnObs.setEnabled(false);
        btnObs.setNextFocusableComponent(btnConsultar);
        btnObs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObsActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Período de Pagto.:");

        try {
            txtPeriodoPagto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####-##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPeriodoPagto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPeriodoPagto.setNextFocusableComponent(btnCancelar);
        txtPeriodoPagto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPeriodoPagtoFocusLost(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.setEnabled(false);
        btnImprimir.setNextFocusableComponent(btnConsultar);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEstornarMens.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnEstornarMens.setText("Estornar");
        btnEstornarMens.setEnabled(false);
        btnEstornarMens.setNextFocusableComponent(btnConsultar);
        btnEstornarMens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstornarMensActionPerformed(evt);
            }
        });

        btnEstornarMat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnEstornarMat.setText("Estornar");
        btnEstornarMat.setEnabled(false);
        btnEstornarMat.setNextFocusableComponent(btnConsultar);
        btnEstornarMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstornarMatActionPerformed(evt);
            }
        });

        btnCobrancas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/money.png"))); // NOI18N
        btnCobrancas.setText("Cobranças");
        btnCobrancas.setEnabled(false);
        btnCobrancas.setNextFocusableComponent(btnConsultar);
        btnCobrancas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrancasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblInfoNome)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2)
                            .addComponent(jScrollPane1)
                            .addComponent(jSeparator1)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(lblVlrPago, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(lblVlrPendente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCobrancas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEstornarMens)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnImprimir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnObs))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPeriodoPagto, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConsultar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCodigoNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEstornarMat)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtNomeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtCodigoNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConsultar)
                        .addComponent(btnCancelar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(txtPeriodoPagto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnObs)
                    .addComponent(btnImprimir)
                    .addComponent(btnEstornarMens)
                    .addComponent(btnCobrancas))
                .addGap(9, 9, 9)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblVlrPago, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblVlrPendente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEstornarMat)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
        String idAluno = txtCodigoAluno.getText();
        String nomeAluno = txtNomeAluno.getText();
        String nivel = txtCodigoNivel.getText();
        String periodo = txtPeriodo.getText();
        String pagto = txtPeriodoPagto.getText();
        
        boolean buscar = true;
        
        String queryIdAluno = " ";
        if(!idAluno.isEmpty())
            queryIdAluno = " AND MENSALIDADE.ALUNO_ID = " + idAluno;
        
        sqlIdAluno = queryIdAluno;
        
        String queryNomeAluno = " ";
        if(!nomeAluno.isEmpty())
            queryNomeAluno = " AND ALUNO.NOME LIKE '%" + nomeAluno + "%'";
        
        sqlNomeAluno = queryNomeAluno;
        
        String queryNivel = " ";
        if(!nivel.isEmpty())
            queryNivel = " AND NIVEL.CODIGO = '" + nivel + "'";
        
        sqlCodigoNivel = queryNivel;
        
        String queryPeriodo = " ";
        if(!periodo.equals("  /    -  /    ")){
            String[] periodos = periodo.split("-");
            String[] periodo1 = periodos[0].split("/");
            int mesIni = Integer.parseInt(periodo1[0]), anoIni = Integer.parseInt(periodo1[1]);
            
            String[] periodo2 = periodos[1].split("/");
            int mesFim = Integer.parseInt(periodo2[0]), anoFim = Integer.parseInt(periodo2[1]);
            
            int difAnos = anoFim - anoIni;
            
            if((anoIni > anoFim) || (anoIni == anoFim && mesIni > mesFim)){
                JOptionPane.showMessageDialog(this, "O período inicial não pode ser mais novo que o final informado!", "Erro", JOptionPane.OK_OPTION);
                txtPeriodo.setText("");
                txtPeriodo.requestFocusInWindow();
                buscar = false;
            }
            else{
                queryPeriodo = " AND (";
                if(difAnos > 0){
                    boolean continuar = true, firstTime = true;
                    int ini, fim, ano = anoIni;

                    while(continuar){
                        if(firstTime){
                            ini = mesIni;
                        } else{
                            ini = 1;
                        }

                        if(ano == anoFim){
                            fim = mesFim;
                        }else{
                            fim = 12;
                        }

                        for(int i = ini; i <= fim; i++){             
                            String data = "(MENSALIDADE.MESVENCTO = " + String.valueOf(i) + 
                                            " AND MENSALIDADE.ANOVENCTO = " + String.valueOf(ano) + ") OR ";
                            queryPeriodo += data;
                        }

                        ano++;
                        firstTime = false;
                        if(ano > anoFim){
                            continuar = false;
                        }
                    }
                }else{
                    for(int i = mesIni; i <= mesFim; i++){                    
                        String data = "(MENSALIDADE.MESVENCTO = " + String.valueOf(i) + 
                                        " AND MENSALIDADE.ANOVENCTO = " + String.valueOf(anoIni) + ") OR ";
                        queryPeriodo += data;
                    }
                }
                queryPeriodo = queryPeriodo.substring(0, queryPeriodo.length() - 3);
                queryPeriodo += ")";
            }
        }
        
        sqlPeriodo = queryPeriodo;
        
        String queryPagto = " ";
        if(!pagto.equals("  /  /    -  /  /    ")){
            String datas[] = pagto.split("-");
            String data1 = datas[0];
            String data2 = datas[1];
            
            Date dataMenor = null, dataMaior = null;
            try {
                dataMenor = DateFormat.getDateInstance().parse(data1);
            } catch (ParseException ex) {
                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                dataMaior = DateFormat.getDateInstance().parse(data2);
            } catch (ParseException ex) {
                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(dataMenor.getTime() > dataMaior.getTime()){
                JOptionPane.showMessageDialog(this, "A data de pagamento inicial não pode ser maior que a final!", "Erro", JOptionPane.ERROR_MESSAGE);
                txtPeriodoPagto.requestFocusInWindow();
            } else{
                data1 = data1.replaceAll("/", ".");
                data2 = data2.replaceAll("/", ".");
                
                queryPagto = " AND MENSALIDADE.DATAPAGTO BETWEEN CAST('" + data1 + "' AS DATE) AND CAST('" + data2 + "' AS DATE)";
            }
        }
        
        sqlPagto = queryPagto;
        
        String queryStatus = " ";
        if(comboStatus.getSelectedIndex() != 0){
            if(comboStatus.getSelectedIndex() == 1){
                queryStatus = " AND MENSALIDADE.PAGA = 0";
            }else{
                queryStatus = " AND MENSALIDADE.PAGA = 1";
            }
        }
        
        sqlStatus = queryStatus;
        
        if(buscar){
            try{
                conexao = HibernateUtil.openSession();
                List list = conexao.createSQLQuery("SELECT MENSALIDADE.ALUNO_ID, ALUNO.NOME, NIVEL.CODIGO, "
                                                        + "MENSALIDADE.MESVENCTO || '/' || MENSALIDADE.ANOVENCTO AS PERIODOVENCTO, "
                                                        + "MENSALIDADE.VALORAULAS, MENSALIDADE.VALORMATERIAL, MENSALIDADE.VALORPAGO, MENSALIDADE.PAGA, MENSALIDADE.DATAPAGTO, "
                                                        + "(MENSALIDADE.VALORMATERIAL + MENSALIDADE.VALORAULAS) AS VALORTOTAL, " 
                                                        + "MENSALIDADE.NUMEROCHEQUE, MENSALIDADE.DATACOMPENSACAO "
                                                   + "FROM MENSALIDADE, ALUNO, NIVEL "
                                                  + "WHERE MENSALIDADE.ALUNO_ID = ALUNO.ID "
                                                    + "AND MENSALIDADE.NIVEL_ID = NIVEL.ID "
                                                    + queryIdAluno + queryNomeAluno + queryNivel + queryPeriodo + queryStatus + queryPagto
                                                    + " ORDER BY MENSALIDADE.ANOVENCTO, MENSALIDADE.MESVENCTO, MENSALIDADE.DATAPAGTO, ALUNO.NOME")
                        .setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list();

                int x = tblMensalidades.getRowCount();
                DefaultTableModel model = (DefaultTableModel) tblMensalidades.getModel();
                for(int i = 0; i < x; i++){
                    model.removeRow(0);
                }

                if(list.size() > 0){
                    for(Object obj : list){
                        Map row = (Map)obj;
                        String id = row.get("ALUNO_ID").toString();
                        String nome = row.get("NOME").toString(), codigo = row.get("CODIGO").toString();
                        String vencto = row.get("PERIODOVENCTO").toString(), valorAulas = row.get("VALORAULAS").toString();
                        String valorPago = row.get("VALORPAGO").toString();
                        String status = "Pendente", paga = row.get("PAGA").toString(), dataPagto, numeroCheque;
                        String dataCompensacao;

                        if(paga.equals("1"))
                            status = "Paga";

                        if(row.get("DATAPAGTO") == null){
                            dataPagto = " ";
                        } else{
                            dataPagto = row.get("DATAPAGTO").toString();
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
                            Date data = null;
                            try {
                                data = df.parse(dataPagto);
                            } catch (ParseException ex) {
                                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            df = new SimpleDateFormat("dd/MM/yyyy");
                            dataPagto = df.format(data);
                        }

                        if(row.get("NUMEROCHEQUE") == null){
                            numeroCheque = " ";
                        } else{
                            numeroCheque = row.get("NUMEROCHEQUE").toString();
                        }

                        if(row.get("DATACOMPENSACAO") == null){
                            dataCompensacao = " ";
                        } else{
                            dataCompensacao = row.get("DATACOMPENSACAO").toString();
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
                            Date data = null;
                            try {
                                data = df.parse(dataCompensacao);
                            } catch (ParseException ex) {
                                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            df = new SimpleDateFormat("dd/MM/yyyy");
                            dataCompensacao = df.format(data);
                        }

                        //Aplicando a máscara nos valores:
                        valorAulas = String.format("%.2f", Double.parseDouble(valorAulas)).replace(',', '.');
                        valorPago = String.format("%.2f", Double.parseDouble(valorPago)).replace(',', '.');

                        String[] linha = new String[]{id, nome, codigo, vencto, valorAulas, valorPago, status, dataPagto, numeroCheque, dataCompensacao};

                        model.addRow(linha);
                    }
                    resizeColumnWidth(tblMensalidades);
                    btnImprimir.setEnabled(true);
                    btnObs.setEnabled(true);
                    btnEstornarMens.setEnabled(true);
                    btnCobrancas.setEnabled(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Nenhuma informação a listar!", "Aviso", JOptionPane.OK_OPTION);
                    btnImprimir.setEnabled(false);
                    btnObs.setEnabled(false);
                    btnEstornarMens.setEnabled(false);
                    btnEstornarMat.setEnabled(false);
                    btnCobrancas.setEnabled(false);
                }
                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void CarregarParcelasDoAluno(long idAluno, long idNivel) {
        //Limpando a tabela:
        DefaultTableModel model = (DefaultTableModel) tableMaterial.getModel();
        int x = tableMaterial.getRowCount();
        
        for(int i = 0; i < x; i++){
            model.removeRow(0);
        }
        
        try{
            conexao = HibernateUtil.openSession();

            Criteria critAluno = conexao.createCriteria(Aluno.class);
            critAluno.add(Restrictions.eq("ID", idAluno));
            Aluno aluno = null;

            if(critAluno.list().size() > 0) {
                aluno = (Aluno)critAluno.list().get(0);

                conexao.close();
                conexao = HibernateUtil.openSession();

                Criteria crit = conexao.createCriteria(PagtoMaterial.class);
                crit.add(Restrictions.eq("Aluno", aluno));
                crit.add(Restrictions.eq("Nivel", aluno.getNivelAtual()));

                System.out.println("FORAM ENCONTRADOS " + crit.list().size() + " PARCELAS DE MATERIAIS");

                try {
                    if(crit.list().size() > 0){
                        tx = conexao.beginTransaction();

                        //Apagando as mensalidades de cursos:
                        List<PagtoMaterial> mensMaterial = crit.list();

                        double tempVlrPago = 0d, tempVlrPendente = 0d;

                        for(PagtoMaterial m : mensMaterial) {
                            String nroCheque, dataCompensacao;

                            if(m.getNumeroCheque() == null)
                                nroCheque = "";
                            else
                                nroCheque = m.getNumeroCheque();

                            if(m.getDataCompensacao() == null)
                                dataCompensacao = "";
                            else
                                dataCompensacao = m.getDataCompensacao().toString();    

                            String dataPagto = m.getDataPagto().toString();
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
                            Date data = null;
                            try {
                                data = df.parse(dataPagto);
                            } catch (ParseException ex) {
                                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            df = new SimpleDateFormat("dd/MM/yyyy");
                            dataPagto = df.format(data);

                            model.addRow(new Object[]{m.getAluno().getID().toString(), m.getAluno().getNome(), m.getNivel().getCodigo(), m.getValorPago().toString(), dataPagto, nroCheque, dataCompensacao});

                            tempVlrPago += m.getValorPago();

                            btnEstornarMat.setEnabled(true);
                        }
                        
                        tempVlrPendente = aluno.getNivelAtual().getValorMaterial() - tempVlrPago;
                        BigDecimal valor = new BigDecimal(String.valueOf(tempVlrPendente));
                        valor = valor.setScale(2, RoundingMode.UP);
                        
                        lblVlrPago.setText("R$ " + String.valueOf(tempVlrPago));
                        lblVlrPendente.setText("R$ " + valor.toString());
                    }
                }catch(Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
                }

            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        if(conexao.isOpen())
            conexao.close();
    }
    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        int x = tblMensalidades.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tblMensalidades.getModel();
        for(int i = 0; i < x; i++){
            model.removeRow(0);
        }
        
        int y = tableMaterial.getRowCount();
        DefaultTableModel modelMaterial = (DefaultTableModel) tableMaterial.getModel();
        for(int i = 0; i < y; i++){
            modelMaterial.removeRow(0);
        }
        
        lblVlrPago.setText("");
        lblVlrPendente.setText("");
        
        txtCodigoAluno.setText("");
        txtCodigoNivel.setText("");
        txtNomeAluno.setText("");
        txtPeriodo.setText("");
        comboStatus.setSelectedIndex(0);
        txtCodigoAluno.requestFocusInWindow();
        btnImprimir.setEnabled(false);
        btnObs.setEnabled(false);
        btnEstornarMens.setEnabled(false);
        btnEstornarMat.setEnabled(false);
        btnCobrancas.setEnabled(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtNomeAlunoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeAlunoKeyReleased
        // TODO add your handling code here:
        if(txtNomeAluno.getText().length() != 0){
            txtNomeAluno.setText(txtNomeAluno.getText().toUpperCase());
         
            try{
                //Verificando se existe o nome cadastrado no banco:
                conexao = HibernateUtil.openSession();
                Criteria select = conexao.createCriteria(Aluno.class);
                select.add(Restrictions.like("Nome", txtNomeAluno.getText(), MatchMode.ANYWHERE));

                if(select.list().size() > 0){
                    lblInfoNome.setText("Foram encontrados " + select.list().size() + " resultados semelhantes cadastrados. Clique para visualizar.");
                    lblInfoNome.setVisible(true);
                }else{
                    lblInfoNome.setVisible(false);
                }

                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            lblInfoNome.setVisible(false);
        }
    }//GEN-LAST:event_txtNomeAlunoKeyReleased

    private void txtCodigoNivelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoNivelKeyReleased
        // TODO add your handling code here:
        if(txtCodigoNivel.getText().length() != 0){
            txtCodigoNivel.setText(txtCodigoNivel.getText().toUpperCase());
        }
    }//GEN-LAST:event_txtCodigoNivelKeyReleased

    private void lblInfoNomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseEntered
        // TODO add your handling code here:                                 
        lblInfoNome.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseEntered

    private void lblInfoNomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseExited
        // TODO add your handling code here:                                 
        lblInfoNome.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseExited

    private void lblInfoNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseClicked
        // TODO add your handling code here:                                        
        AlunosCadastrados consultaAlunos;
        consultaAlunos = AlunosCadastrados.getInstance(txtNomeAluno.getText(), AlunosCadastrados.CALLER.CALLER_CONSULTAMENSALIDADE);
        consultaAlunos.SetJanelaPai(this);

        consultaAlunos.setVisible(true);
    }//GEN-LAST:event_lblInfoNomeMouseClicked

    private void tableMaterialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMaterialMouseClicked
        
    }//GEN-LAST:event_tableMaterialMouseClicked

    private void tblMensalidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMensalidadesMouseClicked
        //Selecionamos alguma linha?
        if(tblMensalidades.getSelectedRow() >= 0) {
            //Obtendo o ID do Nivel e do aluno para a função:
            Aluno aluno = null;
            
            try{
                //Verificando se existe o nome cadastrado no banco:
                conexao = HibernateUtil.openSession();
                Criteria select = conexao.createCriteria(Aluno.class);
                System.out.println("ID: " + tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 0));
                select.add(Restrictions.eq("ID", Long.parseLong((String)tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 0))));

                if(select.list().size() > 0){
                    //Adicionando os valores na tabela:
                    aluno = (Aluno)select.list().get(0);
                    CarregarParcelasDoAluno(aluno.getID(), aluno.getNivelAtual().getID());
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            //Fechando o Hibernate:
            if(conexao.isOpen())
                conexao.close();
        }
    }//GEN-LAST:event_tblMensalidadesMouseClicked

    private void btnObsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObsActionPerformed
        // TODO add your handling code here:
        if(tblMensalidades.getSelectedRow() >= 0){
            Long idAluno;
            String codigoNivel;
            String periodoVencto;
            int mesVencto;
            int anoVencto;
            
            try{
                conexao = HibernateUtil.openSession();

                idAluno = Long.parseLong(tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 0).toString());
                codigoNivel = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 2).toString();
                periodoVencto = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 3).toString();
                String periodo[] = periodoVencto.split("/");
                mesVencto = Integer.parseInt(periodo[0]);
                anoVencto = Integer.parseInt(periodo[1]);

                Criteria select = conexao.createCriteria(Nivel.class);
                select.add(Restrictions.eq("Codigo", codigoNivel));
                List<Nivel> niveis = select.list();
                Nivel n = niveis.get(0);

                Criteria crit = conexao.createCriteria(Mensalidade.class);
                crit.add(Restrictions.eq("Aluno", (Aluno)conexao.get(Aluno.class, idAluno)));
                crit.add(Restrictions.eq("Nivel", n));
                crit.add(Restrictions.eq("MesVencto", mesVencto));
                crit.add(Restrictions.eq("AnoVencto", anoVencto));

                Mensalidade m = (Mensalidade) crit.list().get(0);

                Observacoes obs = new Observacoes();
                obs.BuscarObs(m);
                obs.setLocationRelativeTo(null);
                obs.setVisible(true);
                
                conexao.close();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else{
            JOptionPane.showMessageDialog(this, "Nenhuma mensalidade foi selecionada!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObsActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(this, "Confirma impressão de Controle Financeiro?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            //Gerando relatorio:
            HashMap map = new HashMap();
            JasperPrint jasperPrint = null;
            Connection connection = null;
            try {
                connection = DriverManager.getConnection("jdbc:firebirdsql:localhost:C:\\Banco\\UNIQUE.FDB","sysdba","1123581321");
            } catch (SQLException ex) {
                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }

            map.put("idAluno", sqlIdAluno);
            map.put("nomeAluno", sqlNomeAluno);
            map.put("codigoNivel", sqlCodigoNivel);
            map.put("periodo", sqlPeriodo);
            map.put("pagto", sqlPagto);
            map.put("status", sqlStatus);
            try {
                JasperReport compiled = JasperCompileManager.compileReport("C:\\Banco\\Relatorios\\Financeiro.jrxml");
                jasperPrint = JasperFillManager.fillReport(compiled, map, connection);
                JRViewer viewer = new JRViewer(jasperPrint);
                JFrame report = new JFrame();
                report.setExtendedState(MAXIMIZED_BOTH);
                report.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                report.setTitle("Controle Financeiro");
                Container c = report.getContentPane();
                c.add(viewer);
                report.setVisible(true);

            } catch (JRException ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível imprimir o relatório. Motivo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        instance = null;
    }//GEN-LAST:event_formWindowClosed

    private void btnEstornarMensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstornarMensActionPerformed
        // TODO add your handling code here:
        if(tblMensalidades.getSelectedRow() >= 0){
            String status = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 6).toString();
            if(status.equals("Pendente")){
                JOptionPane.showMessageDialog(this, "A mensalidade selecionada está pendente e não pode ser estornada!", "Erro", JOptionPane.ERROR_MESSAGE);
            } else if(JOptionPane.showConfirmDialog(this, "Confirma o estorno da mensalidade?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                Long idAluno;
                String codigoNivel;
                String periodoVencto;
                int mesVencto;
                int anoVencto;

                conexao = HibernateUtil.openSession();
                tx = conexao.beginTransaction();

                idAluno = Long.parseLong(tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 0).toString());
                codigoNivel = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 2).toString();
                periodoVencto = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 3).toString();
                String periodo[] = periodoVencto.split("/");
                mesVencto = Integer.parseInt(periodo[0]);
                anoVencto = Integer.parseInt(periodo[1]);

                Criteria select = conexao.createCriteria(Nivel.class);
                select.add(Restrictions.eq("Codigo", codigoNivel));
                List<Nivel> niveis = select.list();
                Nivel n = niveis.get(0);

                Criteria crit = conexao.createCriteria(Mensalidade.class);
                crit.add(Restrictions.eq("Aluno", (Aluno)conexao.get(Aluno.class, idAluno)));
                crit.add(Restrictions.eq("Nivel", n));
                crit.add(Restrictions.eq("MesVencto", mesVencto));
                crit.add(Restrictions.eq("AnoVencto", anoVencto));

                Mensalidade m = (Mensalidade) crit.list().get(0);
                m.setDataCompensacao(null);
                m.setNumeroCheque("");
                m.setDataPagto(null);
                m.setPaga(false);
                m.setValorPago(0d);
                
                try{
                    conexao.saveOrUpdate(m);
                
                    tx.commit();
                    
                    JOptionPane.showMessageDialog(this, "Mensalidade estornada com sucesso!", "Confirmação", JOptionPane.INFORMATION_MESSAGE);
                    
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Não foi possível estornar a mensalidade. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
                conexao.close();

            }
        } else{
            JOptionPane.showMessageDialog(this, "Nenhuma mensalidade foi selecionada!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEstornarMensActionPerformed

    private void btnEstornarMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstornarMatActionPerformed
        // TODO add your handling code here:
        if(tableMaterial.getSelectedRow() >= 0){
            if(JOptionPane.showConfirmDialog(this, "Confirma o estorno de pagamento de material?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                Long idAluno;
                String codigoNivel;

                conexao = HibernateUtil.openSession();
                tx = conexao.beginTransaction();

                idAluno = Long.parseLong(tableMaterial.getValueAt(tableMaterial.getSelectedRow(), 0).toString());
                codigoNivel = tableMaterial.getValueAt(tableMaterial.getSelectedRow(), 2).toString();

                Criteria select = conexao.createCriteria(Nivel.class);
                select.add(Restrictions.eq("Codigo", codigoNivel));
                List<Nivel> niveis = select.list();
                Nivel n = niveis.get(0);

                Criteria crit = conexao.createCriteria(PagtoMaterial.class);
                crit.add(Restrictions.eq("Aluno", (Aluno)conexao.get(Aluno.class, idAluno)));
                crit.add(Restrictions.eq("Nivel", n));

                PagtoMaterial m = (PagtoMaterial) crit.list().get(0);
                
                try{
                    conexao.delete(m);
                
                    tx.commit();
                    
                    JOptionPane.showMessageDialog(this, "Pagamento de material estornado com sucesso!", "Confirmação", JOptionPane.INFORMATION_MESSAGE);
                    
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Não foi possível estornar o pagamento do material. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
                conexao.close();

            }
        } else{
            JOptionPane.showMessageDialog(this, "Nenhum pagamento de material foi selecionado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEstornarMatActionPerformed

    private void btnCobrancasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrancasActionPerformed
        // TODO add your handling code here:
        if(tblMensalidades.getSelectedRow() >= 0){
            Long idAluno;
            String codigoNivel;
            String periodoVencto;
            int mesVencto;
            int anoVencto;

            conexao = HibernateUtil.openSession();
            tx = conexao.beginTransaction();

            idAluno = Long.parseLong(tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 0).toString());
            codigoNivel = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 2).toString();
            periodoVencto = tblMensalidades.getValueAt(tblMensalidades.getSelectedRow(), 3).toString();
            String periodo[] = periodoVencto.split("/");
            mesVencto = Integer.parseInt(periodo[0]);
            anoVencto = Integer.parseInt(periodo[1]);

            Criteria select = conexao.createCriteria(Nivel.class);
            select.add(Restrictions.eq("Codigo", codigoNivel));
            List<Nivel> niveis = select.list();
            Nivel n = niveis.get(0);

            Criteria crit = conexao.createCriteria(Mensalidade.class);
            crit.add(Restrictions.eq("Aluno", (Aluno)conexao.get(Aluno.class, idAluno)));
            crit.add(Restrictions.eq("Nivel", n));
            crit.add(Restrictions.eq("MesVencto", mesVencto));
            crit.add(Restrictions.eq("AnoVencto", anoVencto));

            Mensalidade m = (Mensalidade) crit.list().get(0);

            Cobrancas cobrancas = new Cobrancas();
            try {
                cobrancas.SetMensalidade(m);
            } catch (ParseException ex) {
                Logger.getLogger(ConsultaMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }
            cobrancas.setVisible(true);
        } else{
            JOptionPane.showMessageDialog(this, "Nenhuma mensalidade foi selecionada!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCobrancasActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        fechando = true;
    }//GEN-LAST:event_formWindowClosing

    private void txtPeriodoPagtoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPeriodoPagtoFocusLost
        if(!fechando){
            if(txtPeriodoPagto.getText().equals("  /  /    -  /  /    "))
                txtPeriodoPagto.setValue(null);
        }
    }//GEN-LAST:event_txtPeriodoPagtoFocusLost

    private void txtPeriodoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPeriodoFocusLost
        if(!fechando){
            if(txtPeriodo.getText().equals("  /    -  /    "))
                txtPeriodo.setValue(null);
        }
    }//GEN-LAST:event_txtPeriodoFocusLost

    public void LoadInfoForStudent(Long id){
        System.out.println("ID RECEBIDO: " + id.toString());

        Aluno aluno = null;

        try{
            //Verificando se existe o nome cadastrado no banco:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Aluno.class);
            select.add(Restrictions.eq("ID", id));

            if(select.list().size() > 0){
                //Adicionando os valores na tabela:
                aluno = (Aluno)select.list().get(0);
            }

            //Inicializando o Hibernate:
            conexao.close();
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        //Encontramos um aluno?
        if(aluno != null){
            txtCodigoAluno.setText(id.toString());
            txtNomeAluno.setText(aluno.getNome());
        }
    }
    
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaMensalidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaMensalidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaMensalidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaMensalidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaMensalidades(-1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCobrancas;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEstornarMat;
    private javax.swing.JButton btnEstornarMens;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnObs;
    private javax.swing.JComboBox comboStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblInfoNome;
    private javax.swing.JLabel lblVlrPago;
    private javax.swing.JLabel lblVlrPendente;
    private javax.swing.JTable tableMaterial;
    private javax.swing.JTable tblMensalidades;
    private javax.swing.JTextField txtCodigoAluno;
    private javax.swing.JTextField txtCodigoNivel;
    private javax.swing.JTextField txtNomeAluno;
    private javax.swing.JFormattedTextField txtPeriodo;
    private javax.swing.JFormattedTextField txtPeriodoPagto;
    // End of variables declaration//GEN-END:variables
}
