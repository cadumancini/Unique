/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unique;

import Tabelas.Aluno;
import Tabelas.Falta;
import Tabelas.Historico;
import Tabelas.Turma;
import java.awt.Container;
import java.awt.Cursor;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import unique.Cadastros.CadastroTurmas;
import unique.Consultas.AlunosCadastrados;
import util.HibernateUtil;

/**
 *
 * @author loren
 */
public class ControleDeNotas extends javax.swing.JFrame {

    /**
     * Creates new form ControleDeNotas
     */
    private ControleDeNotas() {
        this.alterouFalta = false;
        initComponents();        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Logo.png")));
        LimparCampos();
        comboBoxNivel.addActionListener((ActionEvent e) -> {
            MudouItemComboNivel(); 
        });
    }
    
    private void MudouItemComboNivel() {
        if(alunoSelecionado == null) {
            return;
        }
        try {
            //Obtendo o historico selecionado:
            Historico hist = historicoDoAluno.get(comboBoxNivel.getSelectedIndex());
            if(hist != null) {
                //Exibindo as informações:
                if(hist.getNota1() != null) {
                    txtBoxNota1.setCaretPosition(0);
                    txtBoxNota1.setText("0" + hist.getNota1().toString() + "0");
                }else {
                    txtBoxNota1.setText("   .  ");
                }
                
                if(hist.getNota2() != null) {
                    txtBoxNota2.setCaretPosition(0);
                    txtBoxNota2.setText("0" + hist.getNota2().toString() + "0");
                }else {
                    txtBoxNota2.setText("   .  ");
                }
                
                if(hist.getNota3() != null) {
                    txtBoxNota3.setCaretPosition(0);
                    txtBoxNota3.setText("0" + hist.getNota2().toString() + "0");
                }else {
                    txtBoxNota3.setText("   .  ");
                }
                
                if(hist.getNota4() != null) {
                    txtBoxNota4.setCaretPosition(0);
                    txtBoxNota4.setText("0" + hist.getNota2().toString() + "0");
                }else {
                    txtBoxNota4.setText("   .  ");
                }
                
                if(hist.getNota5() != null) {
                    txtBoxNota5.setCaretPosition(0);
                    txtBoxNota5.setText("0" + hist.getNota2().toString() + "0");
                }else {
                    txtBoxNota5.setText("   .  ");
                }
                
                if(hist.getMedia() != null) {
                    txtBoxMediaFinal.setText(hist.getMedia().toString());
                } else {
                    txtBoxMediaFinal.setText("   .  ");
                }
            }
        }  catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static ControleDeNotas getInstance() {
        if (instance == null)
            instance = new ControleDeNotas();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtBoxNome = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblInfoNome = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFaltas = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel22 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtBoxNota1 = new javax.swing.JFormattedTextField();
        txtBoxNota2 = new javax.swing.JFormattedTextField();
        lblComboBox = new javax.swing.JLabel();
        comboBoxNivel = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtBoxMediaFinal = new javax.swing.JFormattedTextField();
        lblTotalFaltasNivel = new javax.swing.JLabel();
        txtBoxTotalFaltas = new javax.swing.JFormattedTextField();
        btnAdicionarFalta = new javax.swing.JButton();
        btnRemoverFalta = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        txtBoxNota3 = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBoxNota4 = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBoxNota5 = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Controle de Notas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel1.setText("Controle de Notas");

        txtBoxNome.setColumns(50);
        txtBoxNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxNomeKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Nome:");

        lblInfoNome.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        lblInfoNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/package-installed-outdated.png"))); // NOI18N
        lblInfoNome.setText(" ");
        lblInfoNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblInfoNomeMouseExited(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel21.setText("Controle de Faltas:");

        tableFaltas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data da Falta", "Quantidade de Aulas Perdidas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFaltas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFaltasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableFaltas);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel22.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        jLabel22.setText("Controle de Histórico:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Nota 1:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Nota 2:");

        try {
            txtBoxNota1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxNota1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNota1.setMinimumSize(new java.awt.Dimension(6, 20));
        txtBoxNota1.setNextFocusableComponent(txtBoxNota2);
        txtBoxNota1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxNota1FocusLost(evt);
            }
        });
        txtBoxNota1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxNota1KeyTyped(evt);
            }
        });

        try {
            txtBoxNota2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxNota2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNota2.setMinimumSize(new java.awt.Dimension(6, 20));
        txtBoxNota2.setNextFocusableComponent(txtBoxNota3);
        txtBoxNota2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxNota2FocusLost(evt);
            }
        });
        txtBoxNota2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxNota2KeyTyped(evt);
            }
        });

        lblComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblComboBox.setText("Nível a Ser Consultado:");

        comboBoxNivel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboBoxNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Média Final:");

        txtBoxMediaFinal.setEditable(false);
        txtBoxMediaFinal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxMediaFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxMediaFinalKeyTyped(evt);
            }
        });

        lblTotalFaltasNivel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTotalFaltasNivel.setText("Total de Faltas No Nível:");

        txtBoxTotalFaltas.setEditable(false);
        txtBoxTotalFaltas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnAdicionarFalta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-add - SMALL.png"))); // NOI18N
        btnAdicionarFalta.setText("Adicionar Falta");
        btnAdicionarFalta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarFaltaActionPerformed(evt);
            }
        });

        btnRemoverFalta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnRemoverFalta.setText("Remover Falta");
        btnRemoverFalta.setEnabled(false);
        btnRemoverFalta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverFaltaActionPerformed(evt);
            }
        });

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/dialog-ok.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/list-remove.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/unique/Imagens/edit-find.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        try {
            txtBoxNota3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxNota3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNota3.setMinimumSize(new java.awt.Dimension(6, 20));
        txtBoxNota3.setNextFocusableComponent(txtBoxNota4);
        txtBoxNota3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxNota3FocusLost(evt);
            }
        });
        txtBoxNota3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxNota3KeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Nota 3:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Nota 4:");

        try {
            txtBoxNota4.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxNota4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNota4.setMinimumSize(new java.awt.Dimension(6, 20));
        txtBoxNota4.setNextFocusableComponent(txtBoxNota5);
        txtBoxNota4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxNota4FocusLost(evt);
            }
        });
        txtBoxNota4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxNota4KeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Nota 5:");

        try {
            txtBoxNota5.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBoxNota5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBoxNota5.setMinimumSize(new java.awt.Dimension(6, 20));
        txtBoxNota5.setNextFocusableComponent(btnSalvar);
        txtBoxNota5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxNota5FocusLost(evt);
            }
        });
        txtBoxNota5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxNota5KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(377, 377, 377))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblInfoNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel21)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTotalFaltasNivel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBoxTotalFaltas, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnRemoverFalta)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAdicionarFalta)))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnImprimir)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCancelar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSalvar)
                                        .addGap(12, 12, 12))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtBoxMediaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel22)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtBoxNota1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtBoxNota2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel5)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtBoxNota3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel7)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtBoxNota4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel8)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtBoxNota5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(0, 6, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblComboBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBoxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComboBox)
                    .addComponent(comboBoxNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(txtBoxNota1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBoxNota2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtBoxNota3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtBoxNota4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(txtBoxNota5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBoxMediaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBoxTotalFaltas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTotalFaltasNivel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAdicionarFalta)
                                    .addComponent(btnRemoverFalta))
                                .addGap(0, 45, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSalvar)
                                    .addComponent(btnCancelar)
                                    .addComponent(btnImprimir))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBoxNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNomeKeyReleased
        //Pesquisando no banco:
        if(txtBoxNome.getText().length() != 0){
            //Passando para UPPERCASE:
            txtBoxNome.setText(txtBoxNome.getText().toUpperCase());
            //Verificando se existe o nome cadastrado no banco:
            conexao = HibernateUtil.openSession();
            Criteria select = conexao.createCriteria(Aluno.class);
            select.add(Restrictions.like("Nome", txtBoxNome.getText(), MatchMode.ANYWHERE));

            if(select.list().size() > 0){
                lblInfoNome.setText("Foram encontrados " + select.list().size() + " resultados semelhantes já cadastrados. Clique para visualizar.");
                lblInfoNome.setVisible(true);
            }else{
                lblInfoNome.setVisible(false);
            }
            conexao.close();
        }else{
            lblInfoNome.setVisible(false);
        }
    }//GEN-LAST:event_txtBoxNomeKeyReleased

    private void lblInfoNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseClicked
        //Abrindo a janela de consulta:
        AlunosCadastrados consultaAlunos = AlunosCadastrados.getInstance(txtBoxNome.getText(), AlunosCadastrados.CALLER.CALLER_CONTROLENOTAS);
        consultaAlunos.SetJanelaPai(this);
        consultaAlunos.setVisible(true);
    }//GEN-LAST:event_lblInfoNomeMouseClicked

    private void lblInfoNomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseEntered
        lblInfoNome.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseEntered

    private void lblInfoNomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblInfoNomeMouseExited
        lblInfoNome.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_lblInfoNomeMouseExited

    private void btnAdicionarFaltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarFaltaActionPerformed
        //Temps:
        boolean done = false;
        Date dateInformed = null;
        Long aulasPerdidas = 0l;
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        
        //Obtendo as informações:
        do {
            //Obtendo a data da falta:
            String dataFalta = JOptionPane.showInputDialog(this, "Qual a data da falta?", "Informe a Data", JOptionPane.QUESTION_MESSAGE);

            if(dataFalta != null) {
                //Tentando codificar a data:
                try {
                    dateInformed = DateFormat.getDateInstance().parse(dataFalta);
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Data Inválida! Tente novamente ou cancele a operação.");
                    continue;
                }
                break;
            } else {
                //Usuário cancelou. Saindo...
                return;
            }
        }while (!done);
        
        //Obtendo o nro de aulas perdidas:
        while(!done) {
            String tempQtdAulas = JOptionPane.showInputDialog(this, "Quantidade de aulas perdidas?", "Informe a Qtd", JOptionPane.QUESTION_MESSAGE);
            
            if(tempQtdAulas != null) {
                //Validando o valor:
                try {
                    aulasPerdidas = Long.parseLong(tempQtdAulas);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Quantidade Inválida! Tente novamente ou cancele a operação.");
                    continue;
                }
                break;
            } else {
                //Usuário cancelou. Saindo...
                return;
            }
        }
        
        //Adicionando a falta na lista:
        Falta falta = new Falta();
        falta.setAluno(alunoSelecionado);
        falta.setAulasPerdidas(aulasPerdidas);
        falta.setData(dateInformed);
        falta.setTurma(historicoDoAluno.get(comboBoxNivel.getSelectedIndex()).getTurma());
        faltasDoAluno.add(falta);
        faltasNovas.add(falta);
        //Se chegamos até aqui, adicionando os valores na tebela:
        UpdateTabelaFaltas();
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouFalta = true;
    }//GEN-LAST:event_btnAdicionarFaltaActionPerformed

    private void UpdateTabelaFaltas() {
        //Atualizando a tabela de faltas:
        DefaultTableModel newModel = (DefaultTableModel) tableFaltas.getModel();
        newModel.setRowCount(0);
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        int aulasPerdidas = 0;
        //Adicionando:
        for(Falta falta : faltasDoAluno) {
            newModel.addRow(new Object[]{ df.format(falta.getData()), falta.getAulasPerdidas() });
            aulasPerdidas += falta.getAulasPerdidas();
        }
        //Atualizando o total de faltas:
        txtBoxTotalFaltas.setText(String.valueOf(aulasPerdidas));
    }
    
    private void btnRemoverFaltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverFaltaActionPerformed
        ///Temos algo selecionado na tabela?
        if(tableFaltas.getSelectedRow() >= 0){
            int linha = tableFaltas.getSelectedRow();
            Long totalDeFaltas = 0l;
            DefaultTableModel newModel = (DefaultTableModel) tableFaltas.getModel();
            
            //Removendo da lista:
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            
            for(Falta falta : faltasDoAluno) {
                if(df.format(falta.getData()).equals(newModel.getValueAt(linha, 0).toString()) && falta.getAulasPerdidas() == Long.parseLong(newModel.getValueAt(linha, 1).toString())) {
                    faltasDoAluno.remove(falta);
                    faltasRemover.add(falta);
                    break;
                }
            }
            
            for(Falta falta : faltasDoAluno) {
                totalDeFaltas += falta.getAulasPerdidas();
            }
            
            txtBoxTotalFaltas.setText(String.valueOf(totalDeFaltas));
            newModel.removeRow(linha);
            
            //Sobreou alguma linha?
            if(newModel.getRowCount() <= 0) {
                btnRemoverFalta.setEnabled(false);
            }
            
            btnSalvar.setEnabled(true);
            alterouFalta = true;
        }
    }//GEN-LAST:event_btnRemoverFaltaActionPerformed

    private void tableFaltasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFaltasMouseClicked
        //Selecionamos algum responsavel?
        if(tableFaltas.getSelectedRow() >= 0){
            btnRemoverFalta.setEnabled(true);
        }else {
            btnRemoverFalta.setEnabled(false);
        }
    }//GEN-LAST:event_tableFaltasMouseClicked

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        //Abrindo a conexão com o Hibernate:
        conexao = HibernateUtil.openSession();
        Transaction tx = conexao.beginTransaction();
        boolean canCommit = true;

        //Confirmando as Faltas:
        long qtdFaltas = 0;
        
        try {
            qtdFaltas = Long.parseLong(txtBoxTotalFaltas.getText());
        } catch (NumberFormatException e) {
            qtdFaltas = 0;
            canCommit = false;
        }
        
        if(alterouFalta && qtdFaltas > 0 && JOptionPane.showConfirmDialog(this, "Confirma a inserção de " + txtBoxTotalFaltas.getText() + " faltas para o aluno '" + txtBoxNome.getText() + "' no nível '" + comboBoxNivel.getSelectedItem().toString() + "'?", "Confirmação", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            //Limpando as faltas:
            for(Falta falta : faltasRemover)
                conexao.delete(falta);
            
            faltasRemover.clear();
            
            for(Falta falta : faltasNovas)
                conexao.saveOrUpdate(falta);
            
            faltasNovas.clear();
            canCommit = true;
            
        } else if(qtdFaltas == 0) {
            Criteria select = conexao.createCriteria(Falta.class);
            select.add(Restrictions.eq("Aluno", alunoSelecionado));
            select.add(Restrictions.eq("Turma", historicoDoAluno.get(comboBoxNivel.getSelectedIndex()).getTurma()));
            
            List<Falta> faltas = select.list();
            for(Falta falta : faltas){
                conexao.delete(falta);
            }
            canCommit = true;
        }
        
        //Se chegamos até aqui, inserindo as faltas no banco:
        if(canCommit) {
            try{
                tx.commit();
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            tx.rollback();
            canCommit = true;
        }
        
        conexao = HibernateUtil.openSession();
        tx = conexao.beginTransaction();
        
        //Salvando o histórico:
        if(alterouHistorico && JOptionPane.showConfirmDialog(this, "Confirma as alterações no histórico do aluno?", "Confirmação", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            //Convertendo as notas:
            canCommit = CalculaNotas();
            
            //Verificando se temos um histórico:
            try {
                Double.parseDouble(txtBoxMediaFinal.getText());   
                if(JOptionPane.showConfirmDialog(this, "Confirma MÉDIA FINAL de " + txtBoxMediaFinal.getText() + " para o aluno(a) " + alunoSelecionado.getNome() + "?" , "Confirmação", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
                    canCommit = false;
                }
            } catch (NumberFormatException e) {
                
            }
            
            //Confirmando a média final do aluno:
            if(canCommit) {
                //Salvando os valores:
                Historico historicoParaSalvar = historicoDoAluno.get(comboBoxNivel.getSelectedIndex());
                historicoParaSalvar.setAluno(alunoSelecionado);
                historicoParaSalvar.setFaltas(qtdFaltas);
                historicoParaSalvar.setID(historicoDoAluno.get(comboBoxNivel.getSelectedIndex()).getID());
                
                try {
                    historicoParaSalvar.setNota1(Double.valueOf(txtBoxNota1.getText()));
                } catch(NumberFormatException e) {
                    historicoParaSalvar.setNota1(null);
                }
                
                try {
                    historicoParaSalvar.setNota2(Double.valueOf(txtBoxNota2.getText()));
                } catch(NumberFormatException e) {
                    historicoParaSalvar.setNota2(null);
                }
                
                try {
                    historicoParaSalvar.setNota3(Double.valueOf(txtBoxNota3.getText()));
                } catch(NumberFormatException e) {
                    historicoParaSalvar.setNota3(null);
                }
                
                try {
                    historicoParaSalvar.setNota4(Double.valueOf(txtBoxNota4.getText()));
                } catch(NumberFormatException e) {
                    historicoParaSalvar.setNota4(null);
                }
                
                try {
                    historicoParaSalvar.setNota5(Double.valueOf(txtBoxNota5.getText()));
                } catch(NumberFormatException e) {
                    historicoParaSalvar.setNota5(null);
                }
                
                // Alterar aqui para mudar o modo de calcular a media.
                if(historicoParaSalvar.getNota1() != null && historicoParaSalvar.getNota2() != null) {
                    historicoParaSalvar.setMedia(Double.valueOf(txtBoxMediaFinal.getText()));
                }else {
                    historicoParaSalvar.setMedia(null);
                }
                
                historicoParaSalvar.setTurma(historicoDoAluno.get(comboBoxNivel.getSelectedIndex()).getTurma());
                conexao.saveOrUpdate(historicoParaSalvar);
            }
        }
        
        //Podemos inserir no banco?
        if(canCommit) {
            try{
                tx.commit();
                alterouFalta = false;
                alterouHistorico = false;
            } catch(Exception e){
                JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
            MudouItemComboNivel();
        } else {
            tx.rollback();
        }
        
        //Fechando a conexão com o hibernate:
        conexao.close();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtBoxNota1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNota1KeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxNota1KeyTyped

    private void txtBoxNota2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNota2KeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxNota2KeyTyped

    private void txtBoxMediaFinalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxMediaFinalKeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxMediaFinalKeyTyped

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //Apagando a instancia:
        instance = null;
    }//GEN-LAST:event_formWindowClosed

    private void txtBoxNota1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxNota1FocusLost
        //A outra nota está preenchida?
        try {
          Double.parseDouble(txtBoxNota1.getText());
          Double.parseDouble(txtBoxNota2.getText());
          Double.parseDouble(txtBoxNota3.getText());
          Double.parseDouble(txtBoxNota4.getText());
          Double.parseDouble(txtBoxNota5.getText());
          CalculaNotas();
        } catch (NumberFormatException e) {
            
        }
    }//GEN-LAST:event_txtBoxNota1FocusLost

    private void txtBoxNota2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxNota2FocusLost
        //A outra nota está preenchida?
        try {
          Double.parseDouble(txtBoxNota1.getText());
          Double.parseDouble(txtBoxNota2.getText());
          Double.parseDouble(txtBoxNota3.getText());
          Double.parseDouble(txtBoxNota4.getText());
          Double.parseDouble(txtBoxNota5.getText());
          CalculaNotas();
        } catch (NumberFormatException e) {
            
        }
    }//GEN-LAST:event_txtBoxNota2FocusLost

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //Limpando a tela:
        LimparCampos();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // Chamar relatório de impressão de Historico
        if(JOptionPane.showConfirmDialog(this, "Confirma geração do relatório do Histórico para este aluno?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            Long alunoID, turmaID;
            alunoID = alunoSelecionado.getID();
            turmaID = historicoDoAluno.get(comboBoxNivel.getSelectedIndex()).getTurma().getID();
            //Conecatando com o hibernate:
            conexao = HibernateUtil.openSession();
            //Gerando relatorio:
            HashMap map = new HashMap();
            JasperPrint jasperPrint = null;
            Connection connection = null;
            try {
                connection = DriverManager.getConnection("jdbc:firebirdsql:localhost:C:\\Banco\\UNIQUE.FDB","sysdba","1123581321");
            } catch (SQLException ex) {
                Logger.getLogger(GerarMensalidades.class.getName()).log(Level.SEVERE, null, ex);
            }

            map.put("AlunoID", alunoID);
            map.put("TurmaID", turmaID);
            try {
                JasperReport compiled = JasperCompileManager.compileReport("C:\\Banco\\Relatorios\\Historico.jrxml");
                jasperPrint = JasperFillManager.fillReport(compiled, map, connection);
                JRViewer viewer = new JRViewer(jasperPrint);
                JFrame report = new JFrame();
                report.setExtendedState(MAXIMIZED_BOTH);
                report.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                report.setTitle("Histórico: Notas e Faltas");
                Container c = report.getContentPane();
                c.add(viewer);
                report.setVisible(true);
            } catch (JRException ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível imprimir o relatório. Motivo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void txtBoxNota3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxNota3FocusLost
        //A outra nota está preenchida?
        try {
          Double.parseDouble(txtBoxNota1.getText());
          Double.parseDouble(txtBoxNota2.getText());
          Double.parseDouble(txtBoxNota3.getText());
          Double.parseDouble(txtBoxNota4.getText());
          Double.parseDouble(txtBoxNota5.getText());
          CalculaNotas();
        } catch (NumberFormatException e) {
            
        }
    }//GEN-LAST:event_txtBoxNota3FocusLost

    private void txtBoxNota3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNota3KeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxNota3KeyTyped

    private void txtBoxNota4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxNota4FocusLost
        //A outra nota está preenchida?
        try {
          Double.parseDouble(txtBoxNota1.getText());
          Double.parseDouble(txtBoxNota2.getText());
          Double.parseDouble(txtBoxNota3.getText());
          Double.parseDouble(txtBoxNota4.getText());
          Double.parseDouble(txtBoxNota5.getText());
          CalculaNotas();
        } catch (NumberFormatException e) {
            
        }
    }//GEN-LAST:event_txtBoxNota4FocusLost

    private void txtBoxNota4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNota4KeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxNota4KeyTyped

    private void txtBoxNota5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxNota5FocusLost
        //A outra nota está preenchida?
        try {
          Double.parseDouble(txtBoxNota1.getText());
          Double.parseDouble(txtBoxNota2.getText());
          Double.parseDouble(txtBoxNota3.getText());
          Double.parseDouble(txtBoxNota4.getText());
          Double.parseDouble(txtBoxNota5.getText());
          CalculaNotas();
        } catch (NumberFormatException e) {
            
        }
    }//GEN-LAST:event_txtBoxNota5FocusLost

    private void txtBoxNota5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxNota5KeyTyped
        //Ligando o botão para salvar:
        btnSalvar.setEnabled(true);
        alterouHistorico = true;
    }//GEN-LAST:event_txtBoxNota5KeyTyped

    private boolean CalculaNotas() {
        //As duas notas estão preenchidas?
        double tmpNota1 = 0d, tmpNota2 = 0d, tmpNota3 = 0d, 
                tmpNota4 = 0d, tmpNota5 = 0d, tmpMediaFinal = 0d;
        
        if(!txtBoxNota1.getText().equals("   .  "))
            tmpNota1 = Double.parseDouble(txtBoxNota1.getText());

        if(!txtBoxNota2.getText().equals("   .  "))
            tmpNota2 = Double.parseDouble(txtBoxNota2.getText());

        if(!txtBoxNota3.getText().equals("   .  "))
            tmpNota3 = Double.parseDouble(txtBoxNota3.getText());

        if(!txtBoxNota4.getText().equals("   .  "))
            tmpNota4 = Double.parseDouble(txtBoxNota4.getText());

        if(!txtBoxNota5.getText().equals("   .  "))
            tmpNota5 = Double.parseDouble(txtBoxNota5.getText());
        
        //Calculando a média final:
        int qtdNotas = 0;
        double valorNotas = 0;
        if(tmpNota1 > 0){
            qtdNotas++;
            valorNotas += tmpNota1;
        }
        if(tmpNota2 > 0){
            qtdNotas++;
            valorNotas += tmpNota2;
        }
        if(tmpNota3 > 0){
            qtdNotas++;
            valorNotas += tmpNota3;
        }
        if(tmpNota4 > 0){
            qtdNotas++;
            valorNotas += tmpNota4;
        }
        if(tmpNota5 > 0){
            qtdNotas++;
            valorNotas += tmpNota5;
        }
        
        if(qtdNotas > 0){
            tmpMediaFinal = valorNotas / qtdNotas;
            BigDecimal valorExato = new BigDecimal(tmpMediaFinal)  
                .setScale(2, RoundingMode.HALF_DOWN);  
            tmpMediaFinal = valorExato.doubleValue();
            txtBoxMediaFinal.setText(String.valueOf(tmpMediaFinal));
        }
        else
            txtBoxMediaFinal.setText("");
        
        return true;
    }
    
    public void LoadInfoForStudent(Long id){
        //Limpando os Campos:
        LimparCampos();
        
        //Verificando se existe o nome cadastrado no banco:
        conexao = HibernateUtil.openSession();
        Criteria select = conexao.createCriteria(Aluno.class);
        select.add(Restrictions.eq("ID", id));
        
        if(select.list().size() > 0){
            //Adicionando os valores na tabela:
            List<Aluno> temp = select.list();
            temp.stream().forEach((Aluno list) -> {
                txtBoxNome.setText(list.getNome());
                alunoSelecionado = list;
            });
            
            //Buscando os Níveis que esse aluno está cadastrado:
            Criteria selectHistorico = conexao.createCriteria(Historico.class);
            selectHistorico.add(Restrictions.eq("Aluno", alunoSelecionado));
            
            if(selectHistorico.list().size() > 0) {
                historicoDoAluno = selectHistorico.list();
            } else {
                //Obtendo as turmas do aluno:
                List<Turma> turmas = alunoSelecionado.getTurmas();
                
                //Se não encontramos, avisando e perguntando.
                if(turmas.size() <= 0) {
                    if(AlunosCadastrados.getInstance(null, null) != null)
                            AlunosCadastrados.getInstance(null, null).dispose();
                    
                    if(JOptionPane.showConfirmDialog(this, "Este aluno não está cadastrado em nenhuma turma. Deseja arbir o cadastro de turmas?", "Aviso", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                        CadastroTurmas cadastroTurmas = CadastroTurmas.getInstance();
                        cadastroTurmas.setVisible(true);
                        cadastroTurmas.setExtendedState(this.getExtendedState() | MAXIMIZED_BOTH);
                        this.dispose();
                        return;
                    } else {
                        LimparCampos();
                    }
                }
                //Criando um histórico para o nível atual:
                historicoDoAluno = new ArrayList<>();
                Historico historico = new Historico();
                historico.setAluno(alunoSelecionado);
                historico.setTurma(turmas.get(0));
                historico.setFaltas(0l);
                
                //Salvando esse novo histórico no banco:
                //conexao = HibernateUtil.openSession();
                Transaction tx = conexao.beginTransaction();
                try{
                    conexao.saveOrUpdate(historico);
                    tx.commit();
                } catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Operação mal sucedida. Motivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
                historicoDoAluno.add(historico);
            }
            
            //Preenchendo a combobox de níveis:
            comboBoxNivel.removeAllItems();
            
            if(historicoDoAluno.size() > 0) {
                for(Historico hist : historicoDoAluno) {
                    System.out.println(hist.getTurma().getID());
                    System.out.println(hist.getTurma().getNivel().getCodigo());
                    if (hist.getTurma().isAtiva()) {
                        comboBoxNivel.addItem(hist.getTurma().getNivel().getCodigo() + " [TURMA ATIVA]");
                    } else {
                        comboBoxNivel.addItem(hist.getTurma().getNivel().getCodigo()+ " [TURMA INATIVA]");
                    }
                }
            }
            
            //Buscando as faltas que esse aluno tem cadastradas:
            Criteria selectFaltas = conexao.createCriteria(Falta.class);
            selectFaltas.add(Restrictions.eq("Aluno", alunoSelecionado));
            
            //Zerando a tabela de faltas:
            DefaultTableModel newModel = (DefaultTableModel) tableFaltas.getModel();
            newModel.setRowCount(0);
            
            if(selectFaltas.list().size() > 0) {
                //Preenchendo a tabela:
                faltasDoAluno = selectFaltas.list();
                long totalDeFaltas = 0l;
                SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                
                for(Falta falta : faltasDoAluno) {
                    newModel.addRow(new Object[]{ df.format(falta.getData()), falta.getAulasPerdidas() });
                    totalDeFaltas += falta.getAulasPerdidas();
                }
                //Salvando a Label:
                txtBoxTotalFaltas.setText(String.valueOf(totalDeFaltas));
            } else {
                faltasDoAluno = new ArrayList<>();
            }
            
            //Buscando as informações do Historico do nivel selecionado:
            Historico hist = historicoDoAluno.get(comboBoxNivel.getSelectedIndex());
            
            if(hist.getNota1() != null) {
                if(hist.getNota1() < 100) {
                    txtBoxNota1.setText("0" + hist.getNota1().toString() + "0");
                }else {
                    txtBoxNota1.setText(hist.getNota1().toString() + "0");
                }
            }
            
            if(hist.getNota2() != null) {
                if(hist.getNota2() < 100) {
                    txtBoxNota2.setText("0" + hist.getNota2().toString() + "0");
                }else {
                    txtBoxNota2.setText(hist.getNota2().toString() + "0");
                }
            }
            
            if(hist.getNota3() != null) {
                if(hist.getNota3() < 100) {
                    txtBoxNota3.setText("0" + hist.getNota3().toString() + "0");
                }else {
                    txtBoxNota3.setText(hist.getNota3().toString() + "0");
                }
            }
            
            if(hist.getNota4() != null) {
                if(hist.getNota4() < 100) {
                    txtBoxNota4.setText("0" + hist.getNota4().toString() + "0");
                }else {
                    txtBoxNota4.setText(hist.getNota4().toString() + "0");
                }
            }
            
            if(hist.getNota5() != null) {
                if(hist.getNota5() < 100) {
                    txtBoxNota5.setText("0" + hist.getNota5().toString() + "0");
                }else {
                    txtBoxNota5.setText(hist.getNota5().toString() + "0");
                }
            }
            
            if(hist.getMedia() != null) {
                if(hist.getMedia() < 100) {
                    txtBoxMediaFinal.setText("0" + hist.getMedia().toString() + "0");
                }else {
                    txtBoxMediaFinal.setText(hist.getMedia().toString() + "0");
                }
            }
            
            EnableDisableFields(true);
            btnSalvar.setEnabled(false);
            btnImprimir.setEnabled(true);
        } else {
            EnableDisableFields(false);
        }
        //Inicializando o Hibernate:
        conexao.close();
        txtBoxNome.requestFocusInWindow();
    }
    
    private void EnableDisableFields(boolean value) {
        txtBoxMediaFinal.setEnabled(value);
        txtBoxNota1.setEnabled(value);
        txtBoxNota2.setEnabled(value);
        txtBoxNota3.setEnabled(value);
        txtBoxNota4.setEnabled(value);
        txtBoxNota5.setEnabled(value);
        txtBoxTotalFaltas.setEnabled(value);
        comboBoxNivel.setEnabled(value);
        btnAdicionarFalta.setEnabled(value);
        btnSalvar.setEnabled(value);
        btnImprimir.setEnabled(value);
        btnCancelar.setEnabled(value);
    }
    
    private void LimparCampos() {
        alunoSelecionado = null;
        lblInfoNome.setText("");
        lblInfoNome.setVisible(false);
        txtBoxNome.setText("");
        txtBoxMediaFinal.setText("");
        txtBoxNota1.setText("");
        txtBoxNota2.setText("");
        txtBoxNota3.setText("");
        txtBoxNota4.setText("");
        txtBoxNota5.setText("");
        txtBoxTotalFaltas.setText("");
        comboBoxNivel.removeAllItems();
        alterouFalta = false;
        alterouHistorico = false;
        faltasRemover = new ArrayList<>();
        faltasNovas = new ArrayList<>();
        
        EnableDisableFields(false);
        txtBoxNome.requestFocusInWindow();
        DefaultTableModel newModel = (DefaultTableModel) tableFaltas.getModel();
            newModel.setRowCount(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControleDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControleDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControleDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControleDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControleDeNotas().setVisible(true);
            }
        });
    }
    
    Session conexao = null;
    List<Historico> historicoDoAluno = null;
    List<Falta> faltasDoAluno = null, faltasRemover = null, faltasNovas = null;
    Aluno alunoSelecionado = null;
    private static ControleDeNotas instance = null;
    boolean alterouFalta, alterouHistorico;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarFalta;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnRemoverFalta;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox comboBoxNivel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblComboBox;
    private javax.swing.JLabel lblInfoNome;
    private javax.swing.JLabel lblTotalFaltasNivel;
    private javax.swing.JTable tableFaltas;
    private javax.swing.JFormattedTextField txtBoxMediaFinal;
    private javax.swing.JTextField txtBoxNome;
    private javax.swing.JFormattedTextField txtBoxNota1;
    private javax.swing.JFormattedTextField txtBoxNota2;
    private javax.swing.JFormattedTextField txtBoxNota3;
    private javax.swing.JFormattedTextField txtBoxNota4;
    private javax.swing.JFormattedTextField txtBoxNota5;
    private javax.swing.JFormattedTextField txtBoxTotalFaltas;
    // End of variables declaration//GEN-END:variables
}
